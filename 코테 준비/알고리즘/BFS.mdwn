# BFS

- BFS를 하기 위해서는 **큐**이론이 필요함.
- 인접 리스트로 그래프를 구현할 줄 알아야 함.
- 현재 위치에서(노드에서) 최대한 넓게 이동한 다음, 갈 수 없을 때 아래로 이동
- **인접한 노드를 먼저 탐색**
- 주로 노드 사이 최단 경로를 알고싶을 때 사용

## 사전 지식 : 큐

- 큐는 선입 선출의 자료 구조임
- 큐는 먼저 들어온 값이 제일 가장 먼저 나감
- 큐는 enqueue 혹은 offer, **add**로 값을 추가하고 dequeue 혹은 poll **remove**로 값을 뺌

## 사전 지식 : 그래프 표현하기

그래프를 표현하기 위해서 2가지 방법이 쓰인다.

1. 인접 행렬
2. 인접 리스트

인접 행렬은 구현하기 쉽다는 특징이 있지만, 그래프를 인접 행렬의 원소로 추가하는 것과 인접 행렬의 모든 원소 탐색의 경우 n^2 의 시간이 소요된다.
하지만 인접 리스트는 구현하기 어렵지만 추가와 탐색에 모든 노드를 확인하지 않기 때문에 O(E) 시간이 걸린다.

두 방법에 장단점과 모두 매력이 있지만 문제 풀이에서는 **인접 리스트**를 이용한 풀이가 더욱 많다.
하지만 코딩 테스트에 있어 **라이브러리 사용이 금지**될 때 인접 행렬을 쓴다고한다.
아직 나는 그런 코딩 테스트를 경험해본적 없다.

```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        int n = 4;
        int m = 5;

        int[] edge1 = {1, 2};
        int[] edge2 = {1, 3};
        int[] edge3 = {1, 4};
        int[] edge4 = {2, 3};
        int[] edge5 = {3, 4};

        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();

        // 그래프 초기화
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        graph.get(edge1[0]).add(edge1[1]);
        graph.get(edge1[1]).add(edge1[0]);

        graph.get(edge2[0]).add(edge2[1]);
        graph.get(edge2[1]).add(edge2[0]);

        graph.get(edge3[0]).add(edge3[1]);
        graph.get(edge3[1]).add(edge3[0]);

        graph.get(edge4[0]).add(edge4[1]);
        graph.get(edge4[1]).add(edge4[0]);

        graph.get(edge5[0]).add(edge5[1]);
        graph.get(edge5[1]).add(edge5[0]);
    }
}
```

이제 본론인 BFS 알고리즘으로 들어가보자.

# BFS

BFS 알고리즘은 그래프의 **모든 정점**을 방문하고자 하는 전략 중 하나다.
특히 BFS는 DFS와 다르게 특정 조건에서의 **최단 경로 문제**를 해결하기 위해서 사용될 수 있다.

BFS 알고리즘은 **너비 우선 탐색**이라고 하는데, 현재 노드에서 갈 수 있는 모든 노드를 먼저 방문하는 알고리즘이다.

- BFS 알고리즘은 큐 자료구조를 이용한다.

## 탐색 순서

1. 탐색 시작 노드를 큐에 삽입하고, 방문 처리를 한다.
2. 큐에서 노드 하나를 꺼낸다.
3. 꺼낸 노드와 인접한 즉 연결된 노드 중 **방문하지 않은 노드를** 모두 큐에 삽입하고 방문 처리를 한다.
4. 다시 큐에서 노드 하나를 꺼낸다.
5. 위의 3번 과정을 반복하고 큐가 비어있을 때 까지 이 과정을 반복한다.

```java
public Class Main {
  static boolean[] visited; // 방문 확인 배열
  static ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>(); // 인접 리스트 특정 인덱스 접근에 상수 시간이 들어서 일반 배열보다 좋음
  static StringBuilder sb = new StringBuilder();

  public static void main(String[] args) {
    // main 함수 생략
  }

  public static void bfs(int x) {
    visited[x] = true; // 처음 들어온 노드는 바로 방문 처리를 한다.
    queue.add(x); // 큐에 노드를 넣고
    while(!queue.isEmpty()) {

      x = queue.remove(); // 큐에서 노드 하나를 뺀 뒤
      sb.append(value).append(" "); // 방문했으니 출력한다.

      for(int i = 0; i < graph.get(x).size(); i++) { // 인접 노드들을 다 확인하기 위한 반복문
        int value = graph.get(x).get(i);  // 현재 노드와 인접한 노드
        if(!visited[value]) { // 방문 이력이 없으면
          visited[value] = true; // 방문 체크를 하고
          queue.enqueue(value); // 큐에 넣어준다.
        }
      }
    }
  }
}
```
