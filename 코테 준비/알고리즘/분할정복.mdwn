# 분할 정복

주어진 문제를 작은 사례들로 나누고 각각의 작은 문제들을 해결하여 정복하는 방법.
문제를 나눌 수 없을 때 까지 나누고 각각 문제를 해결하여 다시 합병하는 방식의 알고리즘.
주로 Top-Down 접근법으로 최상위 사례의 답은 아래로 내려가며 작은 사례에 대한 답을 구함으로써 구한다.

- 일반적인 재귀 함수 사용

## DP와 차이점

부분 문제들이 중복되어서 상위 문제를 해결할 때 재활용 하는 Memoization을 사용하는 반면 부분 문제들이 서로 중복되지 않아서 Memoization을 사용하지 않는다.

## 설계 전략

- 문제 사례를 하나 이상의 작은 사례로 **분할**한다.
- 작은 사례들을 각각 정복한다. 작은 사례가 충분히 작지 않은 이상 재귀를 사용한다.
- 필요하면, 작은 사례에 대한 해답을 통합하여 원래 사례의 해답을 구한다.

## 분할정복이 쓰이는 곳

- 이분 탐색
- 병합 정력
- 퀵 정렬
- 최대값 찾기

## 장점

문제를 나눔으로써 어려운 문제를 해결할 수 있다.
병렬적으로 문제를 해결하는데 큰 강점이다.

## 단점

함수를 재귀적으로 호출한다는 점에서 함수 호출의 오버헤드가 발생한다.
스택에 다량의 데이터를 보관해야 하므로 스택 오버플로우가 발생한다.

## 이분 탐색을
