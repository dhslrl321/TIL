# 퀵 정렬 알고리즘

- 퀵 정렬은 n개의 데이터를 정렬할 때, 기준 데이터(Pivot)을 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 변경하는 알고리즘이다.

1. 전체 탐색을 하며 Pivot을 기준으로 좌우로 분할.
2. 재귀적으로 Pivot을 기준으로 좌우로 분할.
3. 이 과정을 반복하면서 정렬이 이루어짐

## 특징

- 퀵 정렬은 메모리의 지역화로 인해 CPU 캐시의 히트율이 높아져 효율적으로 작동할 수있음
- 이런 이유로 퀵 소트라는 이름이 불러짐
- 분할 정복의 방법을 통해서 리스트를 정렬
- 피벗을 선택하는 방식에 따라 성능이 달라짐

## 정렬 순서

1. 리스트 가운데서 하나의 **피벗 원소**를 `partition()`메서드를 통해 고름
2. 피벗 앞에는 피벗보다 작은 값이 위치.
3. 피벗 뒤에는 비펏보다 큰 값이 위치.
4. 피벗을 기준으로 리스트를 둘로 분할 (분할 후에는 해당 피벗이 고정)
5. 분할된 두 개의 리스트가 **재귀적으로** 위의 과정을 반복 (리스트 크기가 0이나 1이 될 때 까지)

## 소스 코드

```java
import java.util.Arrays;

public class Main {
  public static void main(String[] args) {
    int[] arr = {7, 1, 5, 0, 8, 6, 2, 4, 3};
    quickSort(arr, 0, arr.length-1);
    System.out.println(Arrays.toString(arr));
  }

  private static void swap(int[] arr, int index1, int index2) {
    int temp = arr[index1];
    arr[index1] = arr[index2];
    arr[index2] = temp;
  }

  private static int partition(int[] arr, int start, int end) {

    int pivot = arr[start];
    int i = start;
    int j = end;

    while(i < j) {
      while(arr[j] > pivot) {
        j--;
      }

      while((i < j) && (arr[i] <= pivot)) {
        i++;
      }
      swap(arr, i, j);
    }
    arr[start] = arr[i];
    arr[i] = pivot;
    return i;
  }

  private static void quickSort(int[] arr, int start, int end) {
    if(start >= end) {
      return;
    }

    int pivot = partition(arr, start, end);
    quickSort(arr, 0, pivot - 1);
    quickSort(arr, pivot + 1, end);
  }
}
```

# 동작 원리 및 트래킹

만약 `arr = {7, 1, 5, 0, 8, 6, 2, 9, 4, 3}`이라는 배열이 있다고 가정해보자.

### partition 메서드

- arr 배열의 0번째 인덱스를 시작으로 **인덱스 증가**하여 피벗보다 큰 수를 찾는다.
- arr 배열의 마지막 인덱스를 시작으로 **인덱스 감소**하며 피벗보다 작은 수를 찾는다.
- 서로 스왑한다.
- 이 과정을 i가 j보다 작을 때 까지 반복한다.
- 피벗과 i를 교환한다.
- 피벗 인덱스를 반환한다.

#### arr = **7**, 1, 5, 0, **8**, 6, 2, 9, 4, **3**

pivot = 7
i : 4
j : 9
피벗 7보다 큰 수 : 8
피벗 7보다 작은 수 : 3
8과 3 스왑 `swap(arr, i, j);`

##### _arr = **7**, 1, 5, 0, **3**, 6, 2, 9, 4, **8**_

#### arr = 7, 1, 5, 0, 3, 6, 2, **9**, **4**, 8

pivot = 7
i : 7
j : 8
피벗 7보다 큰 수 : 9
피벗 7보다 작은 수 : 4
9와 4 스왑 `swap(arr, i, j);`

##### _arr = 7, 1, 5, 0, 3, 6, 2, **4**, **9**, 8_

#### arr = 7, 1, 5, 0, 3, 6, 2, **4**, **9**, 8

`i < j` 조건에 벗어나므로 while문 탈출
pivot = 7
`arr[i]`와 `arr[0]` 스왑
피벗 인덱스 i 반환

##### _arr = 4, 1, 5, 0, 3, 6, 2, 7, 9, 8_

### quickSort 메서드

quickSort 메서드 내부에서 pivot 변수는 위의 `partition()` 과정에 의해 7로 할당되고, 재귀적으로 quickSort가 2번 호출된다.

1. `quickSort(arr, 0, 6);` : arr = {4, 1, 5, 0, 3, 6, 2}에 의해 partition() 동작
2. `quickSort(arr, 8, arr.length -1);` arr = {9, 8} 에 의해 partition() 동작

## 시간 복잡도

- 최악의 시간복잡도 : O(N^2)
- 최고의 시간복잡도 : O(N log N)
- 평균 시간복잡도 : O(N log N)
