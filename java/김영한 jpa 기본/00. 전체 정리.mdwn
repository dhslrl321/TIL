# 연관관계

- `@JoinColumn` **을 사용하는 이유**
  - 그렇지 않으면 조인 테이블 방식을 이용함
    - 테이블 하나가 더 늘어나게 됨
- `@OneToMany(mappedBy="")` **에서** `mappedBy` **이유**
  - 연관 관계의 주인을 지정하기 위해서
  - `mappedBy` 속성이 있다면 주인이 아님
- **연관관계 주인**
  - DB 테이블에서는 양방향이라는게 있지만 객체에서는 양방향 연관 관계라는게 없음
  - 엔티티를 양방향으로 설정하면 객체 참조는 둘인데 외래 키는 하나임
  - 그래서 두 객체 중에서 외래키를 관리할 객체가 무엇인지 정해야 한다. 이걸 연관관계 주인이라고 함
  - 연관관계 주인은 (등록, 수정, 삭제) 가 가능
  - 주인이 아닌 쪽은 읽기만 가능
- **단방향 매핑을 주로 사용해야 하는 이유**
  - 관심사 분리가 실패한 것
  - 상호 참조로 인한 스오플 발생 가능성
  - 순수 객체의 안정성을 위해서 양쪽 방향에 값을 입력해야 함
    - 연관관계 편의 메서드를 작성해야 함
