# 멀티 프로젝트

- 프로젝트 루트에 `eatgo-api` 디렉토리를 만들고 `src` 폴더 와 `build.gradle` 파일을 해당 디렉토리 아래에 넣어줌
- 그리고 `setting.gradle` 에서 마지막 줄에 `include 'eatgo-api'` 라고 인클루드를 하면 gradle이 다시 sync 하고 멀티 프로젝트 환경이 구성됨

# TDD

새로 메서드나 객체를 만들 때 **나는 이렇게 얘를 쓰고싶어, 파라미터는 뭘 갖고 어떤 메서드가 어떤 리턴을 하는지**를 먼저 지정해주고 그걸 아무것도 없는 상태에서 구현한다.
그럼 아무것도 없기 때문에 오류가 나는데, 그 오류를 하나씩 없애가면서 프로그래밍을 하면 된다.

### Assertions.assertEquals

- `Assertions.assertEquals(restaurant.getName(), "Bob zip");`
  - `restaurant.getName()`은 `"Bob zip"`과 같다.

```java
@Test
public void creation() {
  Restaurant restaurant = new Restaurant("Bob zip", "Seoul");
  Assertions.assertEquals(restaurant.getName(), "Bob zip");
  Assertions.assertEquals(restaurant.getAddress(), "Seoul");
}
```

### 바로 알아볼 것

- MockMVC
- SpringRunner
- WebMvcTest

`[{"id":1004,"name":"Bob zip","address":"Seoul","information":"Bob zip in Seoul"}]` 를 테스트하려고 한다.

이 것은 컨트롤러에 의해서 사용자에게 보여지기 때문에 컨트롤러 테스트를 진행해야 한다.

```java
@SpringBootTest
@AutoConfigureMockMvc
public class RestaurantControllerTest {

    @Autowired
    private MockMvc mvc;

    // 레스토랑 리스트에 대한 컨트롤러
    @Test
    public void list() throws Exception {
        mvc.perform(get("/restaurants"))
                .andExpect(status().isOk())
                .andExpect(content().string(containsString("\"id\":1004")))
                .andExpect(content().string(containsString("\"name\":\"Bob zip\"")));
    }
}
```

# 의존성 주입

의존 관계 혹은 의존성 : 둘 이상의 객체가 서로 협력하는 관계를 의존 관계

- A가 B를 사용한다? A가 B에 의존한다.
  - B의 변화가 A에 영향을 끼치게됨
  - 그래서 의존성은 잘 사용해야됨
