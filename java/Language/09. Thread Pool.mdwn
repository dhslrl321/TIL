# Thread

- 쓰레드를 생성하는 방법은 크게 2가지가 있었음.
  1. Runnable impl
  2. Thread extends
- 하지만 이 둘을 자주 사용하지 않음
- 적절한 Thread 의 lifecycle 을 관리하지 않으면 Thread 가 폭증하고 Memory Leak 이 발생
  - 이를 막기 위해서 작업 처리에 사용되는 스레드의 개수를 정해놓아서 제한하고 작업 큐에 들어오는 작업들을 하나씩 남는 쓰레드가 처리

# Executor

- Runnable 구현과 실행 사이의 decoupling 수행
- Thread 를 명시적으로 작성하는 대신 사용됨
  - 즉, Thread 클래스를 상속받고 `start()` 를 호출하는 대신 `Executor.execute()` 를 이용함

# ExecutorService

- 재사용이 가능한 ThreadPool 로 Thread 의 Lifecycle 을 제어함
- ThreadPool 의 최대 Thread 개수보다 수행해야할 Task 가 많을 경우 Blocking Queue 에 저장하고 순차적 실행
- 주로 Executors 의 다양한 static factory method 를 통해 구현 객체를 만들어서 사용
  - 주요 메서드
    - `newCachedThreadPool()`
    - `newFixedThreadPool()`
- 실행 방법
  1. Runnable 구현체를 submit 의 매개변수로 추가하기
  2. 람다를 이용하여 실행 정의하기
- `submit()` 메서드를 통해서 작업을 Blocking Queue 에 추가
- `shutdown()` 메서드를 통해서 쓰레드 풀을 종료

```java
public class Main {
    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(4);

        executor.submit(new FirstThread());
        executor.submit(() -> {
            System.out.printf("[ %s ] 스레드의 task 가 실행됨\n", Thread.currentThread().getName());
        });

        executor.submit(() -> {
            System.out.printf("[ %s ] 스레드의 task 가 실행됨\n", Thread.currentThread().getName());
        });

        executor.submit(() -> {
            System.out.printf("[ %s ] 스레드의 task 가 실행됨\n", Thread.currentThread().getName());
        });

        executor.submit(() -> {
            System.out.printf("[ %s ] 스레드의 task 가 실행됨\n", Thread.currentThread().getName());
        });

        executor.shutdown();
    }
}

class FirstThread implements Runnable {
    @Override
    public void run() {
        System.out.printf("[ %s ] 스레드의 task 가 실행됨\n", Thread.currentThread().getName());
    }
}
```

# Future

- 비동기 연산의 결과를 나타내는 클래스 `ExecutorService.submit()` 의 반환 타입

```java
public class Main2 {
    public static void main(String[] args) throws Exception {
        ExecutorService executor = Executors.newFixedThreadPool(4);
        List<Future<String>> futures = new ArrayList<>(); // 결과

        for (int i = 0; i < 10; i++) {
            Future<String> future = executor.submit(
                    () -> "[" + Thread.currentThread().getName() + "] 의 작업");
            futures.add(future);
        }

        for (Future<String> future : futures) {
            String s = future.get();
            System.out.println("s = " + s);
        }
    }
}
```
