- 제목 : [조금 더 깊은 Java] JVM과 Garbage Collection 에 대해서

[##_Image|kage@xAvgH/btrlS1xHtSX/6tp3HD7E0NtTdlvXoEscx1/img.png|CDM|1.3|{"originWidth":614,"originHeight":493,"style":"alignCenter"}_##]

자바를 공부해보았다면 익히 들었을 JVM, Java Virtual Machine 에 대해서 이야기해보려 한다.

막연하게 JVM 이 동작하고 JVM이 있기 때문에 플랫폼에 독립적이며 Garbage Collection 으로 장점을 얻을 수 있다고 생각하는 사람들이 많을 것이다.

오늘은 JVM이 어떻게 구성되고 Garbage Collection 이 어떤 방식으로 동작하는지 알아볼 것이다.

# JVM 이란?

- jre
  - runtime environment
  - 자바 application 을 로드하는 on-disk 프로그램
  - 구성요소
    - core java class lib
    - class loader
    - jvm
- jvm은 java byte code 를 실행하고자 하는 os 에 종속적이지 않도록 하는 실행 가상머신
  - host machine 내에서 독립적으로 돌아가는 machine
  - ex) vmware, virtualbox
- jvm 종류
  - Oracle의 Hotspot JDK
    - CPU 효율이 좋음
  - OpenJDK 의 OpenJ9
    - IBM, Eclipse 재단에서 만듦
    - HotspotJDK 대체하는 JDK
    - 메모리 효율이 좋음
  - Hotspot JVM과 OpenJ9 의 비교 참고 자료
    - [part1, openj9 vs hotspot](https://www.royvanrijn.com/blog/2018/05/openj9-jvm-shootout/)
    - [part2, openj9 vs hotspot](https://www.royvanrijn.com/blog/2018/05/openj9-hotsport-specjvm2008/)
  - Dalvik VM
    - 안드로이드에 탑재된 JVM
    - 일반 JVM의 명세를 따르지 않음
    - 대표적으로 일반 JVM은 stack based 지만 Dalvik은 Register Based
    - 그래서 Dalvik용 바이트코드로 변환

# JVM 관련 컴포넌트 및 구성요소

- JVM
  - Java Virtual Machine
- JRE
  - Java Runtime Environment 으로 Classloader와 JVM을 포함 (JVM, Java Lib, Java Classloader 를 포함)
  - 단지 Java 프로그램을 실행시키려면 JRE만 깔면 됨
- JDK
  - JRE와 Java 개발 tool 이 포함된 통합 개발 도구
- Java Bytecode
  - 자바와 기계어 사이의 중간 언어로 JVM이 실행하는 명령어의 형태 (기계어 변환되기 전에 바이트코드로 변경됨)
- Java Classloader
  - JRE 의 구성요소로 자바 클래스를 JVM 으로 동적 로드하는 JRE의 일부, 런타임시 클래스를 참조할 때 로드하는 동적 로더
  - JVM 은 내부적으로 클래스를 분석할 수 있게됨
- Java Compiler : 자바 소스코드 `.java` 를 바이트 코드 `.class` 로 변환
- Runtime Data Area
  - JVM이 운영체제 위에서 실행되며 할당받는 메모리 영역
  - 5가지 영역으로 나뉨
    - PC Register : Program Counter
    - Stack Area : 지역변수, 매개변수, 메서드 정보, 임시 데이터 등을 저장
    - Native Method Stack : 실제 실행할 수 있는 기계어로 작성된 프로그램을 실행시키는 영역
    - Heap : 런타임에 동적으로 할당되는 데이터가 저장되는 영역으로 객체나 배열 생성이 저장됨
    - Method Area
- Garbage Collector
  - JVM이 동적으로 사용되지 않는 메모리를 지속적으로 찾아서 제거하는 역할
  - 실행 순서
    - 참조되지 않은 객체들을 탐색 후 삭제 -> 삭제된 객체의 메모리 반환 -> 힙 메모리 재사용

# JVM 특징

- 스택 기반의 가상 머신
  - risc, arm은 register 기반으로 동작
  - jvm 은 stack 기반으로 동작.
    - 이를 stack-based design 이라고 하는데, register-based 보다 훨씬 덜 하드웨어에 종속적이라고 한다.
      - 자세한 사항은 [register vs stack based architecture-stackoverflow](https://stackoverflow.com/questions/164143/registers-vs-stacks) 에서 확인할 수 있다
- 심볼릭 레퍼런스
  - reference type 을 메모리 주소 기반의 레퍼런스가 아닌 심볼릭 레퍼런스를 통해 참조
    - 리눅스의 symbolic link 처럼 특정 파일이나 디렉터리를 직접 접근하는 것이 아닌 해당 파일의 경로를 저장한 파일을 통해 접근하는 방법
- 가비지 컬렉션
  - 객체의 생성은 명시적으로 하되 삭제는 Garbage Collection 이 자동으로 수행
- 플랫폼에 독립적인 기본 자료형
- nbo
  - 자바 클래스 파일은 Network Byte Order 를 사용함
  - Network Byte Order 은 Big-Endian 을 이용
- 동적 로드
  - Classloader 가 담당
  - Compile-Time 에 클래스를 로드하지 않고 Runtime에 클래스를 로드하고 링크함
  - 동적 로드는 Classloader 가 담당함
