[나의 객체지향] 다형성을 위한 instanceof 를 객제지향적으로 제거하는 방법

### 목차

- 서론
- instanceof 란?
- 코드에서 instanceof 를 느껴보자
- Generic 을 이용하여 우아하게 제거하기
- 그럼에도 존재하는 문제점
- 하지만?

# 서론

자바에서 다형성을 이용한 객체지향적 프로그래밍을 하다보면 종종 특정 객체가 지정된 유형의 인스턴스인지 확인해야 하는 경우가 있다.

그 경우 우리는 여러가지 선택지가 있지만, 오늘은 `instanceof` 에 대해 집중하고 이야기해보려 한다.

다형성을 이용한 프로그래밍을 하다 보면 특정 형으로 변환하기 위해 몇가지 작업을 해야 하는데, 그중 대표적인 것이 바로 **instanceof** 연산자이다.

# instanceof 란?

앞서 말했듯 Java 에서는 어떤 객체의 특정 type 에 대해서 동일한 type 인지 확인할 수 있는 연산을 `instanceof` 연산자를 통해서 수행하고 있다.

예를 들어서 다음과 같은 상황에서의 코드를 보자

#### User 는 총 3가지의 형태(Guest, Member, Admin)가 존재한다.

```java
public interface User {
    // User 인터페이스
}

// 게스트
public class Guest implements User {}

// 멤버, 일반 유저
public class Member implements User {}

// 관리자
public class Admin implements User {}

public class Testing {
    @Test
    void test() {
        User admin = new Admin();

        boolean actual = admin instanceof Admin;

        assertThat(actual).isTrue();
    }
}
```

당연하게도 위의 코드는 성공하게 된다.

하지만 일각에서는 이러한 instanceof 의 사용을 **나쁜 냄새**라고 해석하기도 하며 Anti-Pattern 이라는 의견도 존재한다.

> “instanceof”, Why And How To Avoid It In Code [article](https://armedia.com/blog/instanceof-avoid-in-code/)

왜 이것이 코드단에서 피해야할 대상인지 **코드단으로 한 번 알아보자**

# 코드에서 instanceof 를 느껴보자

코드에서 instanceof 를 느껴보자. 왜 이를 Anti-Pattern 이라고 하고 나쁜 냄새라고 하는지.

우선 문제 상황은 이러하다.

### 사용자의 유형에 따라 할 수 있는 행동의 범위가 달라지는데, 이를 확인할 수 있는 어떠한 기능을 만들어보려 한다.

위의 기능을 구현한다면 아래와 같이 세부 내용 및 특징과 제약을 정리할 수 있을 것이다.

## 사용자

[##_Image|kage@b1l9rQ/btrwooRrbEc/kkghw1uAigZWZl4JSM4WK0/img.png|CDM|1.3|{"originWidth":1364,"originHeight":946,"style":"alignCenter","width":1023,"height":710}_##]

- **사용자는 3가지의 유형과 각각의 행위가 존재한다.**
  - **Guest** : 방문자
    - 가능한 행위 : `글 읽기`
  - **Member** : 회원
    - 가능한 행위 : `글 읽기`, `글 쓰기`
  - **Admin** : 관리자
    - 가능한 행위 : `글 읽기`, `글 쓰기`, `글 삭제`

## Actuator

[##_Image|kage@d71Dg7/btrwqMYkPBQ/jPehyuFoQuUYySjTy5E36K/img.png|CDM|1.3|{"originWidth":1562,"originHeight":1112,"style":"alignCenter","width":1172,"height":834}_##]

- `Actuator` **에 의해서 각각 사용자의 행위를 출력**
  - 사용자 유형에 따라 Actuator 를 각기 다르게 구현
    - **GuestActuator** : 1개의 행위를 출력
    - **MemberActuator** : 2개의 행위를 출력
    - **AdminActuator** : 3개의 행위를 출력
  - Composit 패턴을 이용하여 `ActuatorContainer` 에서 `Actuator`를 합성하여 소유

## 전체적 설계

위의 내용들을 합치면 아래와 같은 설계가 나오게 된다.

[##_Image|kage@mJnSd/btrwoocRzDV/MUIdEbCgvZk1qySk3rYm8k/img.png|CDM|1.3|{"originWidth":1562,"originHeight":1838,"style":"alignCenter","width":729,"height":858}_##]

그럼 위의 그림을 토대로 실제 구현을 해보도록 하자
