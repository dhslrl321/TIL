# 잘못된 값이 요청되거나 잘못되었다고 처리해야할 때

우리가 잘못된 값이 들어오거나 값이 아예 안 들어올 때 이를 적절하게 핸들링 해야 한다.

- 입력 값 이외의 값이 들어올 때
  1. 입력 값 이외 값 무시
  2. Bad_Request로 응답
- Bad_Request 처리하기
  1. 입력 값이 이상한 경우
  2. 비즈니스 로직으로 검사할 수 있는 에러
- Bad_Request 응답 본문 처리하기

# 입력 값 이외의 값이 들어올 때

- 만약에 받기로 한 입력 값이 아닌 값이 들어온다면??
  - 에를 들어 id는 auto increament 인데 `"id": 100` 이딴식으로 넘어오면 그걸 안 받는 처리를 한다거나 Bad Request 이런걸 해야됨
  - 혹은 무시하는 방법이 있음
  - 무시하기 위해서 Dto 를 사용할거임
  - DTO 쓰면 단점이 중복이 발생해버림
- DTO를 도메인 객체로 값 복사를 하려면 `ModelMapper` 를 사용해야함

**ModelMapper 안 쓸 때**

```java
@PostMapping
public ResponseEntity createEvent(@RequestBody EventDto eventDto) {
  //eventdto 쓸려면 다음과 같이 엔티티로 복사를 해줘야 한다.
  Event event = Event.builder()
    .name(eventDto.getName())
    .description(eventDto.getDescription())
    .build();

  // .. 생략
  return ResponseEntity.created(createUri).body(event);
}
```

**ModelMapper 쓸 때**

```java
@PostMapping
public ResponseEntity createEvent(@RequestBody EventDto eventDto) {

  // .. 생략
  return ResponseEntity.created(createUri).body(event);
}
```

- 앞에서 무시하는 방법을 선택했으면 이제 여기서는 Bad Reqeust 를 내리는 방법을 보자.
- application.properties 에서 `spring.jackson.deserialization.fail-on-unknown-properties=true` 라고 하면 됨

- 이번에는 입력 값이 없는 경우 Bad Request 를 내리는 방법을 알아보자.
- @Valid, @BindingResult, @Errors 를 이용해서 검증한다.
  - Valid는 리퀘스트 값을 바인딩할 때 검증을 수행한다.
  - Entity 에서 @NotNull, @NotEmpty 등을 이용해서 설정해줌, @Min

# Bad Request 처리하기

Bad Request 처리에 입력 값이 이상한 경우 `CustomValidator`를 만들어서 처리할 수 있다.
