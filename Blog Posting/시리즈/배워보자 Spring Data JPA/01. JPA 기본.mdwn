[##_Image|kage@blCqko/btq17HY6Z1X/BKhgLuQVX2JKOlYyjqAAq1/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

> 해당 글은 **배워보자 Spring Data JPA** 시리즈 입니다.
> 해당 시리즈의 내용이 이어지는 형태이므로 글의 내용 중에 생략되는 말들이 있을 수 있으니, 자세한 사항은 아래 링크를 참고해주세요!

- [Spring Data JPA의 기본과 프로젝트 생성](https://wonit.tistory.com/464) :: **시리즈 학습 환경 준비**
  - JPA의 기본과 Spring Data JPA
  - Springboot project 에서 JPA 설정하기
- [JPA의 기본 어노테이션들](https://wonit.tistory.com/465) :: **JPA의 시작과 동시에 끝**
  - 엔티티와 테이블 매핑
  - 필드와 컬럼 매핑
- [매핑 테이블과 연관관계 매핑하기](https://wonit.tistory.com/466) :: **RDB의 꽃, 연관 관계**
  - 연관관계란?, 외래 키란?, 매핑 테이블이란?
  - 일대일, 일대다, 다대일 연관관계
- [공통 인터페이스 기능](https://wonit.tistory.com/469) :: **어떻게 Data JPA 는 동작할까?**
  - 단건 조회 반환 타입
  - 컬렉션 조회 반환 타입
- [사용자 정의 쿼리 이용하는 방법](https://wonit.tistory.com/470) :: **내가 원하는 쿼리를 JPA 에서 만들어보자!**
  - 메서드 이름으로 쿼리 생성하기
  - `@Query` 를 이용하여 메서드에 정적 쿼리 작성하기
- [페이징과 정렬](https://wonit.tistory.com/483) :: **게시판과 같은 페이지가 있는 서비스에서 빛을 발하는 JPA 페이징!**
  - Data JPA의 페이징과 정렬
  - Web MVC 에서 JPA 페이징과 정렬
- [Auditing](https://wonit.tistory.com/484) :: **모든 요청과 응답에 `누가, 언제` 접근했는지 하나의 엔티티로 관리하자.**
  - 순수 JPA의 Auditing
  - Spring Data JPA의 Auditing

---

# Spring Data JPA 설정

- [MVNRepository](https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa/2.4.4) 에 접속하면 버전에 따른 의존성 확인 가능

**maven**

```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
    <version>2.4.4</version>
</dependency>
```

**gradle**

```yml
implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.4.4'
```

# Spring Data JPA 와 DB 설정

- Springboot 에서 Data JPA를 이용하여 데이터베이스에 저장하기 위해서는 DB 설치와 연결이 필요
  - DB 설치 : h2, 블로그 추천
  - DB 연결 :
- `application.properties` 파일 대신 `application.yml` 파일로 대체

```yml
spring:
  datasource:
    url: jdbc:h2:tcp://localhost/~/dbname
    username: name
    password: pw
    driver-class-name: org.h2.Driver

  jpa:
    hibernate:
      ddl-auto: create
    properties:
      show_sql: true
      format_sql: true
```

- `datasource`
  - 데이터베이스 엔진 정보
- `jpa`
  - jpa 정보
- `hibernate`
  - jpa 의 구현체인 hibernate를 사용할 것이므로 hibernate 설정을 바꿀 수 있음
  - `ddl-auto`
    - 데이터베이스 초기화 전략
    - 4 가지 전략
      1. none : 아무것도 실행하지 않음
      2. create : SessionFactory가 시작될 때 기존의 테이블 삭제 후 재생성
      3. create-drop : SessionFactory 가 종료된다면 drop
      4. update : 변경된 스키마만 적용
      5. validate : 엔티티와 테이블이 정상 매핑 되었는지만 확인
  - `properties`
    - hibernate 기본 설정
    - `show_sql`
      - jpa 가 생성하는 쿼리를 콘솔로 출력
    - `format_sql`
      - 콘솔로 쿼리가 출력될 때 이쁘게 포매팅
- `loging.level`
- 자세한 사항은 [hibernate](https://docs.jboss.org/hibernate/orm/3.3/reference/en-US/html/session-configuration.html#configuration-optional) 참조

# 테스팅

- 간단하게 테스팅
