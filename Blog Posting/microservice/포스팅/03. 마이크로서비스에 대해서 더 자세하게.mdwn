# Microservice, 마이크로서비스란?

지난 시간 [Monolithic vs SOA vs Microservice](https://wonit.tistory.com/manage/posts/) 에서 간단하게 마이크로서비스란 무엇이고 어떻게 구성되는지에 대해서 간략하게 알아보았다.

앞서 말 했듯 **마이크로서비스는 많은 성공 사례가 존재**한다고 했는데, 실제로 어떤 성공 사례가 있는지 알아보자.

# Microservice를 주도하는 대표적인 기업들

현재 IT 시장에서는 Microservice를 주도하는 대표적인 기업들이 있다.

그 중 가장 유명한 곳이 바로 **Amazon과 Netflix**이다.

### Amazon과 Netflix의 MSA

[##_Image|kage@bMjXuD/btq2CkWPaHV/DiBa3HaL63iO82WZczQEEK/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

##### 이 사진은 amazon.com 이라는 서비스를 운영하는데 사용된 MSA 연결 구조이다.

[##_Image|kage@Mrsh2/btq2y3uIyRW/Dlz7bZS8oR3NBv41TTckvK/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

##### 이 사진은 netflix가 동영상 스트리밍 서비스를 운영하는데 사용된 MSA 연결 구조이다.

대표적으로 국내에서는 배달의 민족과 NHN PAYCO 등이 참여하고 있는데, 각각의 내용은 아래의 링크에서 확인할 수 있다.

- [배달의 민족 마이크로서비스 전환기](https://www.youtube.com/watch?v=BnS6343GTkY) Youtube 자료
- [PAYCO 쇼핑 마이크로서비스 아키텍처(MSA) 전환기](https://www.youtube.com/watch?v=l195D5WT_tE) Youtube 자료

> 배달의 민족 영상은 MSA에 대한 기본적인 내용에서 더불어 서비스를 운영함에 있어 만날 수 있는 다양한 문제들을 이야기한다. 이를 통해 많은 내용을 미리 경험해볼 수 있으니 강추!

이를 보면 알 수 있듯, 대규모 기업에서 해당 서비스를 운영하는데 MSA를 사용한다는 것은 **그 만큼 안정적인 서비스 운영**이 가능하다는 것을 말해준다.

MSA에서는 서비스에 따라 프로젝트나 나뉘고 해당 팀이 나뉘게 된다.

결국 이 말은 각각의 팀에서는 각 서비스에 특화된 언어나 기술을 독립적으로 운영하는 것이 가능하다는 것이다.

- 여러 사용자들에 대한 통합적이고 안정적인 관리?
  - **Spring, Java**
- 데이터 분석 및 처리, 인공지능 학습을 통한 새로운 서비스 제공?
  - **Python, Tensorflow**
- 높은 생산성을 위한 빠른 프로토타입의 개발?
  - **Ruby, Ruby On Rails**
- 비동기에 특화된 서버 개발?
  - **Javascript, Node.js**
- OS와 가깝고 고수준의 성능 개발?
  - **C/C++/Rust**

이런 식으로 운영이 가능하다.

### 그럼 진짜 MSA에 대한 정의는 뭘까요?

MSA 에 대해서는 aws 에서 다음과 같이 정의내린다.

> 마이크로서비스는 소프트웨어가 잘 정의된 API를 통해 통신하는 소규모의 독립적인 서비스로 구성되어 있는 경우의 소프트웨어 개발을 위한 아키텍처 및 조직적 접근 방식입니다. 이러한 서비스는 독립적인 소규모 팀에서 보유합니다.

이렇게 마이크로서비스를 도입한다면 몇 가지의 이점이 존재한다.

### MSA의 철학은 뭘까요?

MSA 철학은 유닉스의 철학과 매우 비슷하다.

> Do one thing and do it well, 한 가지 일을 하되 잘하라!

# 마이크로서비스의 이점들

마이크로서비스를 운영한다면 다음과 같은 이점들이 존재한다.
이는

- 민첩성
  - 마이크로서비스는 각각 서비스를 하나의 독립적인 팀 단위로 나누기 때문에 신속한 업무에 처리가 가능해진다
- 유연한 확장성
  - 마이크로서비스는 독립적인 서비스를 확장함에 있어 자유롭기 때문에 서비스가 급증하더라도 가용성을 최대로 유지할 수 있다.
- 손쉬운 배포
  - 마이크로서비스에서 CI와 CD는 중요한 역할을 수행한다. 그에 따라서 쉽게 코드를 테스트하고 업데이트하여 사용자들에게 제공할 수 있다.
- 기술적인 자유
  - 앞서 보았듯 서비스에 특화된 언어로 개발될 수 있어 해당 기업은 하나의 기술로 국한되지 않게된다.
- 복원성
  - 서비스가 독립적으로 운영되기 때문에 실패에 대한 애플리케이션의 저항성이 증가된다.
