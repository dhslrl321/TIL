# 유레가의 네이밍 서버 이용

- Spring Cloud Naming Service인 Eureka 에 등록
- 각각 서비스와 Spring Cloud Gateway 에 Eureka Client를 추가
- 그럼 Eureka는 Naming 서버로 동작하게 됨
  - Spring Cloud Gateway 에서는 ip 기반이 아니라 네이밍 서버에서 받은 서비스 이름을 토대로 설정 작성
- 순서
  - 유레카
  - api 게이트웨이
  - 마이크로서비스

## gateway server

- 유레카가 동작하니까 이제 naming 서버로서 이용할 수 있게 되었음
- 각각 서비스를 ip 주소가 아닌 `lb://SERVICE-INSTANCE-NAME` 로 변경

```yml
server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: gateway-service
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter 출력할거임
            preLogger: true
            postLogger: true
      routes:
        - id: first-service # 어떠한 라우트인지 에 대한 이름
          uri: MY-FIRST-SERVICE # 해당 정보를 어디로 포워딩 시킬 것인지
          predicates: # 조건
            - Path=/first-service/** # 클라이언트가 first-service 로 요청을 하면 8081로 연결
          filters:
            - CustomFilter
        - id: second-service
          uri: lb://MY-SECOND-SERVICE
          predicates:
            - Path=/second-service/**
          filters:
            - name: CustomFilter # 필터 클래스 이름인데 파라미터가 들어가면 - name 을 추가시켜야 함
            - name: LoggingFilter # 필터 클래스 이름
              args: # 파라미터를 넣기 위해서 args
                baseMessage: Spring Cloud Gateway Logging Filter
                preLogger: true
                postLogger: true
```

# 로드 밸런싱

- 서비스를 각각 2개씩 기동
- 동일 서비스를 여러 개를 운영하려면 3가지 방법이 존재
  1. Intellij 의 VM Options 에 `-Dserver.port=9090` 으로 추가
  2. 터미널에서 실행하기, mvn 명령어로 `spring-boot:run -Dspring-boot.run.jvmArguments='-Dserver.port=9000'` 으로 추가
  3. 패키징 파일을 만들고 실행하기, mvn `java -jar -Dserver.port=9000 ./target/service-name.SNAPSHOT.jar`
- 이렇게 하면 직접 포트 번호를 적어줘야 하고 로드밸런싱 할 때 이름이 동일한 문제가 생김
  - 문제 1: 포트 번호를 직접 적어야 한다
    - 랜덤 포트 사용
  - 문제 2: 동일한 인스턴스 이름이라 유레카에서 식별을 못한다.

## 문제 1. 랜덤 포트 사용

```yml
server:
  port: 0 # 랜덤 포트 사용

spring:
  application:
    name: my-first-service

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
```

- 라운드 로빈 방식으로 한 번씩 요청을 분산시켜줌
