# 스트림

- 데이터 소스를 추상화
- 데이터를 다루는데에 자주 사용되는 메서드들을 정의
- 코드의 재사용성을 높임

```java
public static void main(String[] args) {
  Stream<Integer> integerStream = Arrays.stream(new Integer[]{7, 8, 3, 4, 1});
  Stream<String> stringStream = Arrays.stream(new String[]{"ace", "apple", "cake"});

  integerStream.
}
```

- 스트림의 특징
  1. 스트림은 데이터 소스를 변경하지 않는다.
  2. 스트림은 일회용이다.
  3. 스트림은 작업을 내부 반복으로 처리한다.
- 자주 사용되는 Stream 연산 종류
  - `Stream<T> distinct()` : 중복 제거
  - `Stream<T> filter(Predicate<T> predicate)` : 조건에 맞지 않는 요소 제외
  - `Stream<T> limit(long maxSize)` : 스트림의 일부를 잘라냄
  - `Stream<T> skip(long n)` : 스트림의 일부를 건너띔
  - `Stream<T> sorted()` : 스트림의 요소 정렬
  - `Stream<T> sorted(Comparator<T> comparator)` : 스트림의 요소 정렬 (Comparator 재정의)
  - `void forEach(Consumer<? super T> action)` : 각 요소에 지정된 action을 수행
  - `Optional<T> findAny()` : 스트림 요소 중 아무거나 하나를 반환
  - `Optional<T> findFirst()` : 스트림 요소 중 첫 번째 요소 반환
