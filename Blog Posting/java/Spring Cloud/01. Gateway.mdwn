# Spring Cloud Gateway

Spring Cloud Gateway 에 대해서 이해하기 위해서는 우선 **마이크로서비스의 API Gateway Pattern**에 대한 이해가 있어야 한다.

> 만약 해당 패턴에 대해서 알지 못한다면 [MSA의 핵심 구성 요소 - API Gateway 패턴](https://wonit.tistory.com/489?category=854727) 에 대해서 확인하길 바란다.

Spring Cloud Gateway는 Spring WebFlux 위에 API Gateway 를 구축하기 위한 라이브러리를 제공한다.

결국 우리는 Spring Cloud Gateway를 API Gateway를 위해서 사용하는 것이고, 궁극적으로 **로드 밸런싱과 리버스 프록시**를 MSA 에서 구축할 수 있게 되는 것이다.

# Spring Cloud Gateway 에서 우리는?

Spring Cloud Gateway 에서 우리는 다음과 같은 것들을 수행할 수 있다.

- 모든 요청을 모아주는 **프록시**
- **인증** 및 권한 부여
- 모든 요청에 헤더, 쿼리 문자열 조작

이런 것들이 가능한 이유는 바로 Gateway의 위치이다.

## Spring Cloud Gateway 구성

[##_Image|kage@bCGJnb/btq2DGd9h85/W3vMKAuM6QfhvMbwM8wGek/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

---

# 공식 문서

- 용어
  - Route
    - 라우팅을 할 대상 URI
  - Predicate
    - 라우팅에 필요한 조건
  - Filter
    - Gateway Filter 로 modify Requests or Response
    - Spring 의 WebFliter와 같은 위치
- 기능
  - 인증/인가
  - 로드밸런싱
  - Circuit Breaker
  - Routing
  - Logging
- 구조
  - Spring WebFlux 위에 API Gateway 를 구현하기 위한 기술
- zuul과 차이점
  - zuul: 동기 방식, Tomcat 사용, Netflix OSS 출신: Spring 과 조금 상극
  - SCG : 비동기 방식, Netty 사용, Spring 출신: Spring과 궁합 좋음
