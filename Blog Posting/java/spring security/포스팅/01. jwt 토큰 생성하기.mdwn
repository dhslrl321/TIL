# 전통적인 인증 시스템

- 세션-쿠키 인증 방식
  - 인증 과정
    1. POST 방식으로 인증 url 로 id, pw 전송
    2. 서버에서는 사용자에게 요청된 id pw를 db에서 데이터를 가져와서 검사
    3. 서버는 set-cookie를 이용해서 sessionId를 담아서 로그인 세션 값을 클라이언트로 전송
    4. 클라이언트는 해당 세선을 브라우저에 저장
    5. 클라이언트는 권한이 필요한 리소스에 한해서 해당 세션을 쿠키 헤더에 담아서 서버로 전송
    6. 서버에서는 해당 세션 값을 보고 권한을 확인하고 클라이언트가 원하는 리소스의 접근 권한이 맞다면 해당 리소스 전송
  - 문제점
    - 세션과 쿠키는 활용성이 떨어짐, 공유가 불가능
      - 크로스 플랫폼 : 모바일, 웹
      - 멀티 서버 엔진 : 어떤 서버는 사용자 관련 로직을 spring, 어떤 서버는 주문 관련 로직을 django 로 저장하면 db 공유해야함
    - 렌더링된 html 페이지가 반환되지만 모바일 앱에서는 json과 같은 포맷 필요
- 이를 해결하기 위해서 token 기반 인증을 사용함
- Token 기반 인증 방식
  - 인증 과정
    1. POST 방식으로 인증 url 로 id, pw 전송
    2. 서버에서는 사용자에게 요청된 id pw를 db에서 데이터를 가져와서 검사
    3. 사용자 정보를 가지고 token을 생성하고 header 에 토큰을 저장해서 사용자에게 전달
    4. 클라이언트는 해당 토큰을 브라우저에 저장
    5. 클라이언트는 권한이 필요한 리소스에 한해서 해당 토큰을 authorization 헤더에 담아서 서버로 전송
    6. 서버에서는 해당 세션 값을 보고 권한을 확인하고 클라이언트가 원하는 리소스의 접근 권한이 맞다면 해당 리소스 전송
- jwt
  - 인증 헤더에 사용되는 토큰 포맷
  - 서로 다른 시스템에서도 안전한 방법으로 통신 가능
  - CDN 에서도 인증 처리가 가능
  - 클라이언트의 독립적인 서비스가 가능
  - Cookie-Session을 하지 않기 때문에 CSRF 내성
  - 리버스 프록시에서 인증 가능
  - db에서 공유해야하는 세션 값을 하나의 db 에서만 가지고 있으면 됨
