# 상속 관계 매핑

- 객체는 상속 관계가 있지만 RDB에는 상속 관계가 없음
  - 슈퍼 타입과 서브 타입을 이용하면 비슷하게 따라할 수 있음
  - 결국 RDB에서 상속관계를 매핑한다는 것은 객체의 상속 구조와 DB의 슈퍼타입 서브타입 관계를 매핑하는 것임
- 실제로 구현을 할 수 있는 방법은 3가지가 존재
  1. 조인 전략 : 각각의 테이블로 구현
  2. 싱글 테이블 전략 : 하나의 테이블에 다 넣고 `DTYPE` 이라고 구분할 수 있는 컬럼 추가
  3. 구현 클래스 테이블 전략 : 중복을 허용하고 다 각각 구현
- DB 입장에서 위의 3가지 중 어떤 방법을 이용하더라도 JPA에서 다 사용 가능
- 기본적으로 JPA는 상속 관계 매핑 전략을 단일 테이플 전략으로 생성함

# 조인 전략

- `@Inheritance(strategy = InheritanceType.JOINED)` 라고 하면 됨
- 서브 타입 엔티티에서 슈퍼 타입을 extends 하면 됨
- `@DescriminatorColumn` 을 넣으면 `DTYPE` 칼럼이 생긴다.
  - 그러면 엔티티 명으로 `DTYPE` 에 들어감
  - 필수는 아님 하지만 운영 편의성을 위해서 넣어주는게 좋음
- 장점
  - 테이블이 정규화 되어있음
  - 저장 공간을 효율적으로 사용
  - ## 외래 키 참조 무결성 제약조건을 활용할 수 있음
- 단점
  - 조회할 때 조인이 많이 사용돼서 성능 저하가 될 수 있음
  - 조회 쿼리가 조금 복잡
  - 데이터를 등록할 INSERT SQL을 두 번 실행

# 싱글 테이블 전략

- `@Inheritance(strategy = InheritanceType.SINGLE_TABLE)` 라고 하면 됨
- `@DiscriminatorColumn` 을 넣고 `DTYPE`을 넣어야 함
  - 필수임

# 구현 클래스 전략

- `@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)` 라고 하면 됨
- 조회할 때 심플하게 안됨
- 쓰면 안됨

#### 주로 조인 전략을 주 전략으로 가고 너무 단순하고 비즈니스적으로 하찮으면 단일 테이블 전략을 선택함

# @MappedSuperclass

일단 상속 관계 매핑이랑 별로 관계가 없음

- 공통 매핑 정보가 필요할 때 사용
- 상속 관계가 아니고 정말 단순하게 공통 속성이 존재할 때
- DB는 다른데, 객체 입상에서 공통 매핑 정보가 필요할 때
