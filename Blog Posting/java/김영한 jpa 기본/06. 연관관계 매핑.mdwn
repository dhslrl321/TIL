# 연관관계 매핑 기초

- 객체와 테이블 연관관계의 차이를 이해
  - 객체는 연관관계를 위해서 참조를 이용
  - 테이블은 연관관계를 위해서 외래 키와 조인을 이용
- 용어
  - 방향
    - 단방향
      - 한 쪽에서만 참조할 수 있음
      - 참조하려는 엔티티에서 `@ManyToOne`과 `@JoinColumn(name = "조인할 칼럼 이름")`을 넣으면 됨
    - 양방향
      - 양쪽에서 참조해서 왔다갔다 할 수 있음
      - `List<>` 를 생성하고 `ArrayList<>()`로 할당을 함
        - 그래야 널포가 안남
      - 참조 당하는 엔티티에서 `@OneToMany(mappedBy = "참조하는 엔티티에 있는 변수 이름")` 를 넣으면 됨
  - 다중성
    - 1:N, N:1, N:M
  - 연관관계의 주인
    - JPA 계의 포인터

# 양방향 참조에서 `@OneToMany`의 mappedBy 속성은?

- 객체와 테이블이 관계를 맺는 차이
  - 객체
    - 사실상 객체는 `Member`, `List<Member>` 로 양방향을 만들어 줬지만 사실 서로 다른 단방향이 2개 있다.
    - 단방향 Member -> Team
    - 단방향 Team -> Member(List)
  - 테이블
    - 테이블은 외래키가 있음으로 연관관계가 1이다.
    - 사실상 방향이 없다.
- 문제는 어떤 객체 (Member, Team)의 값이 바꼈을 때 테이블이 변경되야 하는지가 명확하지 않음
  - 사실상 테이블 입장에선 누가 주인이 되더라도, 누가 값이 바뀌더라도 상관 없다.
- 그래서 생겨난 것이 **연관관계의 주인** 개념이다.
- 이 것을 **양방향 매핑 규칙**이라고 한다.

# 양방향 매핑 규칙 (Owner)

- 객체의 두 관계중 하나를 연관관계의 주인 (Owner) 으로 지정
  - 외래키의 위치를 기준으로 정해야함
- 연관관계의 주인만이 외래 키를 관리 (등록, 수정)
  - 주인이 아닌 쪽은 읽기만 가능
- 주인이 아닌 쪽에서 mappedBy 속성을 사용해서 주인을 지정
  - 그럼 누구를 주인으로 해야하지?
  - 외래 키가 있는 곳을 주인으로 하는게 좋음
    - 만약 내가 Team 을 주인으로 했다고 치자.
    - 근데 Team 에 있는 MemberList 를 꺼내서 Member의 뭔가를 수정하면 Team 객체를 수정했는데 실질적으로 테이블 변경이 일어나는 것은 Member 테이블임
    - 이거 자체가 조금 헷갈리고 이상함
    - `@OneToMany` 에 `mappedBy` 를 걸라는 소리 (가짜 매핑)
    - 테이블이 다(N) 쪽인 것이 연관관계의 주인이고 일(1) 인 쪽이 주인의 반대편

# 양방향 매핑시 가장 많이 하는 실수

- 등록과 수정은 연관관계의 주인에만 할 것
  - 역방향으로 입력하면 Null 이 됨
- 그럼 연관관계 주인이 아닌 반대는 (아마도 List) 등록을 안 해도 될까?
  - 노노 해야된다.
  - 만약 flush, clear 을 한다면 1차 캐시에서 가져오는게 아니라 db 에서 가져오는거라서 상관 없음
  - Member 에서만 team 을 넣으면 List 는 Null 이 된다.
    - 이유는 1차 캐시에 List 안에 데이터가 없기 때문
    - 만약 flush 한다면 DB에서 가져온 값을 List에 넣기 때문에 상관 없지만
    - 결론은 둘 다 해줘야 한다.
- 순수 객체 상태를 위해서 항상 양쪽에 값을 설정하자
  - 연관관계 편의 메서드를 생성하자.
    - Member 안에서 `setTeam()` 를 `changeTeam()` 처럼 이름을 바꾸고 편의 메서드 생성
  - 양망향 매핑 시에 무한 루프를 조심하자.
    - toString()
    - lombok toString exclude 하자
    - JSON 생성 라이브러리
      - Controller 에서 Entity 를 직접 반환하지 말자
        - 꼭 DTO를 이용해서 내보내자 꼭꼭
      - 그러면 ObjectMapper 가 무한 참조를 해서 에러가 남

#### 양방향 매핑은 객체 입장에서 보면 신경써야할 것들 (연관관계 편의 메서드등과 같이)이 많아지므로 좋지 않다.

#### JPA 설계를 할 때, 단방향 매핑으로 설계를 완료하는 것을 목표로 하자. 양방향은 테이블에 영향을 주지 않으므로 필요할 때만 추가하자.

#### 설계할 때는 단방향으로 하되, 실제 개발할 때 양방향을 추가해야 한다면 하자

# 양방향 매핑을 할 때의 고민

- 연관관계가 단방향인지 양방향인지를 결정할 때는 비즈니스 로직의 측면과 관심사를 잘 파악해야함
- 예를 들어서 Member랑 Order 가 서로 연관관계가 있을 때, 한 회원이 주문을 했던 주문 내역을 보고싶다면?
  - 그럼 Member 에서 getOrders() 해서 가져오는 것은 바람직하지 않음
  - order 에서 member_id 로 조회하는게 맞음
  - 관심사 분리가 잘 이루어지지 않은 것임
  - Member가 굳이 Order를 알아야 한다? 아님
- 근데 만약 Order 랑 OrderItem에 서로 연관관계가 있고, 주문 내역을 보고싶다면?
  - 이건 비즈니스적으로 서로 같은 관심사를 가지고 있음
