# Persistence Context

- 영속성 컨텍스트
  - JPA 가 내부에서 동작하는 과정
  - 엔티티를 영구 저장하는 환경
  - 논리적인 개념
  - EntityManager 를 통해서 영속성 컨텍스트에 접근
    - EntityManager를 하나 생성하면 영속성 컨텍스트 하나 생성
- `EntityManagerFactory` 에서 `EntityManager`를 생성
- `EntityManager.persist()` 를 호출하면 DB에 저장한다는게 아니라 영속성 컨텍스트에 저장한다는 뜻임

# 엔티티 생명주기

- 비영속 상태 : 영속성 컨텍스트와 전혀 관계가 없는 새로운 상태
  - 엔티티 객체를 딱 생성만 한 시점
- 영속 상태 : 영속성 컨텍스트에 관리되는 상태
  - `EntityManager` 로 `persist()` 를 호출해서 엔티티 컨텍스트에 넣는 시점
    - 아까도 말 했지만 `persist()`가 호출된다고 DB에 저장되는게 아님
    - `EntityTransaction.commit()` 할 때 쿼리가 실제로 DB로 가는거임
- 준영속 상태 : 영속성 컨텍스트에서 떨어진 상태
- 삭제 : 삭제 상태

# 1차 캐시

- 영속성 컨텍스트 내부에는 1차 캐시가 있음
  - 엔티티 매니저가 현재로서는 영속성 컨텍스트라고 해도 됨
  - 1차 캐시가 영속성 컨텍스트라고 이해해도 됨
- 영속성 컨텍스트에서 쿼리를 날리면 우선 1차 캐시에 저장함
- 1차 캐시는 map 형태
  - key : id
  - value : entity 객체
- JPA 로 조회를 할 때 1차 캐시를 먼저 조회
  - 성능상 이점인데 한 트랜잭션에서만 일어나기 때문에 큰 이점은 없음
  - 없으면 DB 에서 조회
- 엔티티의 동일성을 보장함
  - 마치 자바 컬렉션에서 동일 식별자를 갖고있는 객체를 꺼내면 동일한 객체인 것 처럼
- 쓰기 지연
  - 영속성 컨텍스트는 INSERT 를 만나면 바로 쿼리를 날리지 않고 **쓰기 지연 SQL 저장소** 에 저장함

# 변경 감지

- 변경이 일어나면 dirty checking 을 통해서 변경을 감지함
- 엔티티 스냅샷을 이용함
  - 값을 읽어온 시점, 쿼리를 날린 시점에 스냅샷을 찍음
  - `flush()` 가 일어나면 스냅샷을 비교함
  - 변경이 일어나면 UPDATE 쿼리를 날림

# 플러시

- 영속성 컨텍스트의 변경내용을 DB에 반영
  - 보통 `commit()` 이 일어나면 플러시가 일어남
  - 영속성 컨텍스트를 비우지 않음
- Dirty Checking 로 수정된 엔티티를 파악하고 쓰기 지연 SQL 저장소의 쿼리를 전송
- 쓰기 지연 SQL 저장소의 쿼리를 DB에 전송
- 플러시 방법
  - `flush()` 메서드 직접 호출
    - 직접 쓸 일이 없지만 혹시 테스트할 때 필요할 수 있으므로 알아놔야함
  - 트랜잭션 커밋
    - 자동 호출
  - JPQL 쿼리 실행
    - 자동 호출
