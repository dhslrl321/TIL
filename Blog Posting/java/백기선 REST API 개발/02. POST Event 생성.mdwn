# 개발

- builder()로 setter 보다 쉽게 사용 가능
- javaBean() 스펙도 만족시키기 위해서 기본 생성자로도 객체를 만들 수 있어야 함,
- javaBean() 스펙도 만족시키기 위해서 세터로 객체를 만들 수 있어야 함

- 롬복에 `@EqualsAndHashCode(of = "id")` 어노테이션을 지정해야 한다

  - 연관관계 매핑을 할 때 객체간 상호 참조가 이루어지면 stackoverflow 가 발생할 수 있다.
  - 그래서 EqualsAndHashCode로 비교할 대상을 직접 지정해야한다.

- `MockMvc` 는 가짜 (목) 디스패처 서블릿에따가 가짜 요청을 보내서 테스트하는 방법
  - 웹에 대한 테스트만 진행한다고 해서 슬라이싱 테스트라고 함 (모든 빈들을 다 등록하는게 아니고 웹과 관련된 빈만 등록해서 빠름)
  - 웹 서버를 띄우닌게 아니라서 빠름
  - 근데 Unit 테스트는 아니라서 Unit 보다는 더 걸림

```java
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@Autowired
MockMvc mockMvc;


// 아래 Event 보면 객체이지 json이 아님
// 그래서 실제로 객체를 JSON으로 바꿔야 하는데, 스프링 부트에서는 이를 손쉽게 해결할 수있음.
@Autowired
ObjectMapper objectMapper;


@Test
public void createEvent() throws Exception{

Event event = Event.builder() // 아래의 id 에 대한 테스트를 진행하기 위해서 실제 값 객체를 생성했다.
        .name("Spring")
        .description("REST API Development with Spring")
        .beginEnrollmentDateTime(LocalDateTime.of(2018,11,23, 23, 12, 12))
        .closeEnrollmentDateTime(LocalDateTime.of(2019,12,12,12,12, 12))
        .beginEventDateTime(LocalDateTime.of(2018,12,12,12,12,12))
        .endEventDateTime(LocalDateTime.of(2018,12,12,12,12,12))
        .basePrice(100)
        .maxPrice(200)
        .limitOfEnrollment(100)
        .location("강남역 D2 스타텁 팩토리")
        .build();


mockMvc.perform(post("/api/events") //HTTP 요청
        .contentType(MediaType.APPLICATION_JSON) // 이렇게 헤더를 지정할 수 있음
        .accept(MediaTypes.HAL_JSON))
      .andDo(print()) // 이걸 써주면 어떤 요청이 갔고 어떤 응답이 왔는지 눈으로 확인할 수 있음
      .andExpect(status().isCreated()) // 결과로 http 201 (create)응답을 기대할 때 씀. 직접 201로 status를 명시해줘도 됨
      .andExpect(jsonPath("id").exists()); // json 결과로 id가 있어야 한다고 명시. 위에서 실제 구현함
}
```
