# 종류

- **DTO**
  - `SessionRequest`
  - `SessionResponse`
- **Config**
  - `SecurityJavaConfig`
    - WebSecurityConfigurerAdapter
  - ## 구현
- **Filter**
  - `JwtAuthenticationFilter`
    - BasicAuthenticationFilter : SecurityFilterChain 중 하나로 BASIC Authentication Header 에 값을 검증할 때 주로 사용됨
    - 구현
      - BASIC 인증 방식을 이용할 때 쓰는 필터를 이용해서 커스텀하기
      - doFilterInternal 에서 ServletRequest 에 존재하는 header 값 추출
      - header 에 토큰이 null 이 아니면 복호화 해서 정보 확인
      - expiredAt 과 현재 시간을 비교해서 refresh token 생성 여부 고민
      - 토큰 복호화해서 Claims 꺼내고 권한 정보 만들어서 Authentication 생성
      - SecurityContextHolder에 Authentication 저장
      - 다른 서블릿 필터들이 동작하도록 doFilter 호출
  - `AuthenticationErrorFilter`
    - HttpFilter
- **Security**
  - `UserAuthentication`
    - AbstractAuthenticationToken
    - 구현
      - 생성자로 userId, role(Collections)를 받고 AbstractAuthenticationToken에 권한을 넣어줌
      - role를 넣어줄 때, SimpleGrantedAuthority 객체로 넣음
- **Exceptions**
  - `LoginFailException`
  - `InvalidTokenException`
- **Utils**
  - `JwtUtils`
- **MVC**
  - `AuthenticationService`
  - `SessionController`

# WebSecurityConfigurerAdapter

- Spring Security 자동 구성이 비활성화되고 사용자 지정 보안 구성
- `@EnableWebSecurity`와 함께 구성

# AbstractAuthenticationToken

- 권한으로 토큰을 생성

### SimpleGrantedAuthority

- 권한을 저장하는 객체
- 생성자 파라미터에 넣는 것으로 권한 객체 생성
