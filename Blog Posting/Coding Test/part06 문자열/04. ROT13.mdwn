# 문제

> 해당 포스팅은 백준의 [문제 이름](https://www.acmicpc.net/problem/11655) 의 접근과 해결 방법을 설명한 글 입니다.  
> 정답 소스 코드를 확인하시려면 [solve url](https://www.acmicpc.net/source/25979097) 에서 확인 가능합니다.

이 문제를 해결하기 위해 **어떤 방식으로 접근**해야 하는지를 먼저 생각해보자.

# 해결법

이번 문제는 문자열 처리 문제중 재밌게 풀 수 있는 문제이다.

우선 문제 분석부터 해보자.
ROT13은 카이사르 암호의 일종이라고 하는데, 핵심은 **13글자 앞으로 shift**하면 된다.

그리고 문제에서는 4가지 문자가 들어올 수 있는데,

1. 대문자 알파벳
2. 소문자 알파벳
3. 숫자
4. 공백

알파벳만 shift해야 한다.

## 접근법

조금 더 생각해보면 실제로 shift 연산을 수행하지 않고도 문제를 해결할 수 있을 것 같다.

알파벳 인덱스에 + 13을 두 번 하면 다시 원래의 문자로 돌아오는 특성을 가지고 문제를 해결해보자.

우리는 다음과 같은 과정으로 문자를 처리할 것이다.

1. 문자의 아스키 코드를 알파벳 인덱스로 변환
2. ROT13 연산을 수행
3. 모듈러 26을 통해 알파벳 인덱스 범위 조정
4. 알파벳 인덱스를 아스키 코드로 변환

이 과정을 거치면 조건을 여러번 나누지 않아도 풀 수 있다.

## 정답 코드

```java
public class Main {
  public static void main(String[] args) throws IOException{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    char[] chars = br.readLine().toCharArray();

    StringBuilder sb = new StringBuilder();

    for(int i = 0; i < chars.length; i++) {
      char word = chars[i];

      if(65 <= word && word <= 90) {
        // 대문자
        int wordIndex = (word - 'A') + 13;
        wordIndex %= 26;
        wordIndex += 'A';
        sb.append(Character.toString((char) wordIndex));
      }else if(97 <= word && word <= 122) {
        // 소문자
        int wordIndex = (word - 'a') + 13;
        wordIndex %= 26;
        wordIndex += 'a';
        sb.append(Character.toString((char) wordIndex));
      }else {
        sb.append(word);
      }
    }

    bw.write(sb.toString());
    bw.flush();
    bw.close();
  }
}
```

---

#### 정답 소스 코드를 확인하시려면 [solve url](https://www.acmicpc.net/source/25979097) 에서 확인 가능합니다.
