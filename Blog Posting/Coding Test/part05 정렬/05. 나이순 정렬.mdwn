# 문제

> 해당 포스팅은 백준의 [문제 이름](https://www.acmicpc.net/problem/10814) 의 접근과 해결 방법을 설명한 글 입니다.  
> 정답 소스 코드를 확인하시려면 [solve url](https://www.acmicpc.net/source/25941267) 에서 확인 가능합니다.

이 문제를 해결하기 위해 **어떤 방식으로 접근**해야 하는지를 먼저 생각해보자.

# 해결법

이번 문제도 **정렬 기준 재정의**에 관한 문제이다.
이 문제를 풀기 위해서는 자바의 **Comparator**을 알아야 한다.
만약 `Comparator`과 `Comparable`에 대해서 알지 못한다면 [Java에서 Comparator로 정렬 기준 바꾸기](https://wonit.tistory.com/143?category=743304)에서 확인할 수 있다.

## 접근법

이 문제에서 핵심은 **먼저 가입한 사람이 앞에 오는 순서**이다.
그냥 Comparator을 재정의 한다면 나이순 정렬은 가능하지만 **먼저 가입한 사람이 뒤에**위치할 수도 있다.
그래서 가입한 사람들에게 각각의 id를 부여하고 해당 id를 기준으로 두번째 정렬을 수행해주면 된다.

## 정답 코드

```java
public class Main {
  public static void main(String[] args) throws IOException{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    int n = Integer.parseInt(br.readLine());
    Member[] members = new Member[n];
    for(int i = 0; i < n; i++){
      String[] ageAndName = br.readLine().split(" ");
      members[i] = new Member(Integer.parseInt(ageAndName[0]), i, ageAndName[1]);
    }

    Comparator<Member> myComparator = new Comparator<>() {
      @Override
      public int compare(Member m1, Member m2) {
        if(m1.age > m2.age) {
          return 1;
        } else if(m1.age == m2.age) {
          if(m1.id > m2.id) {
            return 1;
          }else -1;
        } else return -1;
      }
    };
    Arrays.sort(members, myComparator);

    for(int i = 0; i < n; i ++) {
      bw.write(members[i].age + " " + members[i].name + "\n");
    }
    bw.flush();
    bw.close();
  }
}

class Member {
  int age;
  int id;
  String name;

  Member(int age, int id, String name) {
    this.age = age;
    this.id = id;
    this.name = name;
  }
}
```

---

> 회고

#### 정답 소스 코드를 확인하시려면 [solve url](https://www.acmicpc.net/source/25941267) 에서 확인 가능합니다.
