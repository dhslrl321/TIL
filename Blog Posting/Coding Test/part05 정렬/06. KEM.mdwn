# 문제

> 해당 포스팅은 백준의 [문제 이름](https://wonit.tistory.com/400) 의 접근과 해결 방법을 설명한 글 입니다.  
> 정답 소스 코드를 확인하시려면 [solve url](https://www.acmicpc.net/source/25942161) 에서 확인 가능합니다.

이 문제를 해결하기 위해 **어떤 방식으로 접근**해야 하는지를 먼저 생각해보자.

# 해결법

이번 문제도 **정렬 기준 재정의**에 관한 문제이다.
이 문제를 풀기 위해서는 자바의 **Comparator**을 알아야 한다.
만약 `Comparator`과 `Comparable`에 대해서 알지 못한다면 [Java에서 Comparator로 정렬 기준 바꾸기](https://wonit.tistory.com/143?category=743304)에서 확인할 수 있다.

## 접근법

이번에는 정렬 조건이 4개가 존재한다.

1. 국어 점수가 감소하는 순서로
2. 국어 점수가 같으면 영어 점수가 증가하는 순서로
3. 국어 점수와 영어 점수가 같으면 수학 점수가 감소하는 순서로
4. **모든 점수가 같으면 이름이 사전 순으로 증가하는 순서로**

여기서 4번이 아마 제일 까다로운 조건이 아닐까 싶다.

다른 조건들은 정렬 기준 재정의에 따라서

```java
if(o1.korean < o2.korean) {
  return 1;
}
```

만 수행하면 되는데, 4번 조건은 소문자 26개, 대문자 26개 총 50개가 넘는 조건을 적어야 한다.
이 방법은 String.valueOf() 메서드를 이용해서 각각을 비교하는 방법인데, 너무 비효율적이다.
그래서 문자열 자체를 비교하는 방법인 String.compareTo() 메서드를 사용하여 문제를 해결했다.

```java
return o1.name.compareTo(o2.name)
```

## 정답 코드

```java
public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int n = Integer.parseInt(br.readLine());

        Student[] students = new Student[n];

        for (int i = 0; i < n; i++) {
            String[] score = br.readLine().split(" ");
            students[i] = new Student(
                    score[0],
                    Integer.parseInt(score[1]),
                    Integer.parseInt(score[2]),
                    Integer.parseInt(score[3]));
        }
        Comparator<Student> myComparator = new Comparator<Student>() {
            @Override
            public int compare(Student o1, Student o2) {
                if(o1.korean < o2.korean) {
                    return 1;
                }else if(o1.korean == o2.korean) {
                    if(o1.english > o2.english) {
                        return 1;
                    }else if(o1.english == o2.english) {
                        if(o1.math < o2.math) {
                            return 1;
                        }else if (o1.math == o2.math) {
                            return o1.name.compareTo(o2.name);
                        }
                    }
                }
                return -1;
            }
        };
        Arrays.sort(students, myComparator);
        for (int i = 0; i < n; i++) {
            bw.write(students[i].name + "\n");
        }


        bw.flush();
        bw.close();
    }
}

class Student {
    String name;
    int korean;
    int english;
    int math;

    Student(String name, int korean, int english, int math) {
        this.name = name;
        this.korean = korean;
        this.english = english;
        this.math = math;
    }
}
```

---

## 문제 회고

> 문자열 자체를 비교하는 방법은 String.compareTo() 메서드를 사용하는 방법이 있다.
> 하지만 특정 문자열만 비교하고 싶다면 compare() 메서드를 재정의 하며 String.charAt() 으로 선택하여 따로 조건을 추가할 수 있다.

#### 정답 소스 코드를 확인하시려면 [solve url](https://www.acmicpc.net/source/25942161) 에서 확인 가능합니다.
