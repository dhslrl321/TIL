## 덱 Double ended queue

큐의 front와 rear 에서 모두 삽입과 삭제가 가능한 큐를 의미한다.
큐는 한 곳에서만 삽입되어야 한다는 고정관념을 깨어야 하지만 여전히 큐의 특성을 갖고있기 때문에 중간에 삽입이나 삭제는 허용되지 않는다.

덱은 스택의 개념과 큐의 개념을 조금 적절히 조합한 **유연한 자료 구조**로 평가 받는다.

## 덱의 메서드 구조

- `addFront()`
- `deleteFront()`
- `addRear()`
- `deleteRear()`
- `isEmpty()`
- `isFull()`

앞서 내가 덱은 **유연한 자료구조**라고 이야기 했는데, 여기서 `addFront()` 연산과 `deleteFront()`연산만을 생각해보자.

- 데이터를 추가하는 부분 1개
- 데이터를 삭제하는 부분 1개

어떤 자료 구조가 떠오르나?

#### 그렇다 바로 Stack이다.

이렇듯 front로만 연산을 하면 스택이 되는 것이고 front와 rear을 모두 사용하면 큐가 되는 것이다.

이런 덱의 메서드 구조에서 알 수 있듯이 만약 우리가
