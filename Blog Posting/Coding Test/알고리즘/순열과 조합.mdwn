# 순열

순열 (Permutation)은 수학적으로 **집합의 원소를 다른 순서로 섞는 연산**을 뜻한다.
알고리즘에서는 주로 **모든 순서를 다 시도해봐야 하는 경우**에서 순열이 사용된다.

> 서로 다른 n개의 수가 있는 수열에서 임의로 r개를 택해 일열로 배열하는 것을 뜻하며, `nPr` 로 나타낼 수 있다.
> 집합의 원소가 n개 있는 수열에서 서로 다른 순열은 N! 개가 있다.

크기가 3인 `A = [1, 2, 3]` 수열에서 순열은 (1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1) 으로 6개가 존재한다.

여기서 **처음 순열**을 찾고 (1, 2, 3) 에서 **다음 순열**을 구하고 (1, 3, 2) 이 과정을 **마지막 순열**까지 반복한다면 전체 순열을 찾을 수 있다.

#### 1, 2, 3 에 대한 순열을 나타내면 다음과 같다.

```java
[ 1, 2, 3 ]
[ 1, 2, 4 ]
[ 1, 3, 2 ]
[ 1, 3, 4 ]
[ 1, 4, 2 ]
[ 1, 4, 3 ]

[ 2, 1, 3 ]
[ 2, 1, 4 ]
[ 2, 3, 1 ]
[ 2, 3, 4 ]
[ 2, 4, 1 ]
[ 2, 4, 3 ]

[ 3, 1, 2 ]
[ 3, 1, 4 ]
[ 3, 2, 1 ]
[ 3, 2, 4 ]
[ 3, 4, 1 ]
[ 3, 4, 2 ]

[ 4, 1, 2 ]
[ 4, 1, 3 ]
[ 4, 2, 1 ]
[ 4, 2, 3 ]
[ 4, 3, 1 ]
[ 4, 3, 2 ]
```

### 다음 순열

사전순으로 다음 순열을 찾는 방법

첫 순열은 중복이 없다면 수열의 **오름차순**이고 중복이 존재한다면 **비내림차순**이 된다.
이렇게 첫 순열부터 시작해 계속 다음 순열을 찾게 될 것인데, 해당 순열에서 마지막 순열을 찾게 된다면 한칸 줄여서 다시 시작한다.
마지막 순열은 **내림차순**이 된다.
우리는 이 다음 순열을 구하는 과정을 반복해서 순열을 구할 것이다.

이런 next permutation에서는 몇 가지 주의해야 할 점이 있다.

1. 중복이 있는 원소는 중복을 제외시킨다.
2. 오름차순으로 정렬된 값에서만 사용할 수 있다.

### 다음 순열 알고리즘

시간 복잡도는 `n * n!`

1. `A[i-1] < A[i]` 를 만족하는 **가장 큰 i를 찾는다.**
2. `j >= 1` 이면서 `A[j] > A[i-1]`을 만족하는 **가장 큰 j를 찾는다.**
3. `A[i-1]` 과 `A[j]`를 Swap 한다.
4. `A[i]` 부터 순열을 뒤집는다.

예를 들어

`A = [7, 2, 3, 6, 5, 4, 1]` 이라는 수열이 있다고 해보자.

1번 조건에 의해서 가장 큰 i는 `A[3] = 6`을 찾을 수 있다.
그리고 2번 조건에서 j는 `A[5] = 4` 를 찾을 수 있고, `A[3]`과 `A[5]` 를 서로 swap 하면 된다.
**다음 순열을 찾는다는 것**은 해당 순열의 마지막 순열이라는 뜻이므로 다시 시작을 위해서 `A[i]`의 순서를 뒤집어준다.

### java 코드

```java
private static boolean nextPermutation(int[] arr) {
    int i = arr.length-1;
    while(i > 0 && arr[i-1] >= arr[i]) i--;
    if(i <= 0) return false;

    int j = arr.length-1;

    while(arr[j] <= arr[i-1]) j--;

    swap(arr, i-1, j);
    j = arr.length - 1;
    while(i < j) {
        swap(arr, i, j);
        i++;
        j--;
    }
    return true;
}

private static void swap(int[] arr, int index1, int index2) {
    int temp = arr[index1];
    arr[index1] = arr[index2];
    arr[index2] = temp;
}
```

이전 순열을 찾는 `prevPermutation` 은 nextPermutatio에서 i와 j를 찾는 부분만 반대로 해주면 된다.

```java
private static boolean nextPermutation(int[] arr) {
    int i = arr.length-1;
    while(i > 0 && arr[i-1] <= arr[i]) i--;
    if(i <= 0) return false;

    int j = arr.length-1;

    while(arr[j] >= arr[i-1]) j--;

    swap(arr, i-1, j);
    j = arr.length - 1;
    while(i < j) {
        swap(arr, i, j);
        i++;
        j--;
    }
    return true;
}

private static void swap(int[] arr, int index1, int index2) {
    int temp = arr[index1];
    arr[index1] = arr[index2];
    arr[index2] = temp;
}
```

# 조합

조합은 쉽게 이야기 하자면 **순서가 중요하지 않은 순열**이다.

#### 아까와 마찬가지로 1, 2, 3에 대해서 조합을 만들어보자.

```java
[1, 2, 3]
```

1, 2, 3하나 뿐이다.

조합에서는 1과 2와 3으로 만들 수 있는 수열 하나만을 선택하므로 `[1, 2, 3]` 이나 `[2, 3, 1]` 이나 `[3, 2, 1]` 모두 같은 것이다.

### 예제 문제

- 백준 10972번 [다음 순열](https://www.acmicpc.net/problem/10972)
- 백준 10973번 [이전 순열](https://www.acmicpc.net/problem/10973)
- 백준 10974번 [모든 순열](https://www.acmicpc.net/problem/10974)
