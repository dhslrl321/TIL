# 순환 혹은 재귀 호출

**순환**이라고도 불리는 재귀 호출은 다양한 분야에서 사용될 수 있다.
트리의 모든 노드를 방문하는 것 부터해서 복잡한 **최적화** 까지 CS에 필수적인 개념이라고 생각한다.

하지만 이런 재귀호출은 자칫 잘못하면 **중복이 대량으로 발생**해서 성능이 떨어질 수 있지만 **효과적인 프로그래밍 방법**임에는 틀림 없다.

다음에 있을 트리에서 자주 사용할 개념이니 확실히 알아가자.

## 재귀 호출의 필수

재귀 호출이 발생하고 이를 잘 활용하려면 2가지의 필수 구성 요소가 필요하다.

1. 순환적 문제
2. 명확한 **종료 조건** 혹은 **기저 사례**

#### 기저 사례란?

입력된 문제가 더 이상 줄일 수 없을 만큼 작을 때, 즉 return 될 조건

이 둘 중 하나라도 빠지면 순환 알고리즘이 제대로 동작하지 않게 된다.

이 필수 조건들을 이해하기 위해 재귀 호출 하면 가장 먼저 배우게 되는 **[팩토리얼](https://ko.wikipedia.org/wiki/%EA%B3%84%EC%8A%B9)을 순환으로** 만들어보자.

팩토리얼은 그 수보다 작은 모든 양의 정수의 곱이다.

예를 들어 `5!` 을 계산한다고 생각해보자.

```java
5!은 다음과 같이
1 * 2 * 3 * 4 * 5
이렇게 표현할 수 있고 혹은,
5 * 4! 로 표현할 수 있다.
그럼 4!은
1 * 2 * 3 * 4
라고 표현할 수 있고, 4 * 3! 로 표현할 수 있다.

여기서 우리는 하나의 규칙을 찾을 수 있는데, n!은 ((n-1)!* n)과 같다는 점이다.
```

이 것을 반복문으로 만들면 다음과 같이 작성될 수 있다.

```java
int factorial(int n) {

  int result = 1;

  for(int i = 1; i <= n; i++){
    result = result * i;
  }

  return result;
}
```

하지만 앞서 봤던 **순환적 규칙**인 `((n-1)!* n)`을 사용한다면, 다음과 같이 획기적으로 코드를 줄일 수 있다.

```java
int factorial(int n) {
  if(n == 1) return 1;
  else return n * factorial(n - 1);
}
```

여기서 조금 어색할 수 있다.
함수를 선언과 동시에 **자기 자신의 호출**이 이루어졌다.
일반적인 생각으로는 이상해보이지만 이는 전혀 어색한게 아니다.

잠깐 CS적으로 생각해보자. 조금 지루할 수 있지만.

### 활성 레코드

우리가 A라는 함수에서 B라는 함수를 호출한다고 생각해보자.
그럼 A에서 B라는 함수를 실행하기 위해서 B라는 주소로 이동한다.
그리고 B가 끝나면 A 주소로 다시 복귀해야하기 때문에 A 주소에서 사용하던 **지역 변수, A 주소등의 자료**를 모아 **활성 레코드**로 스택에 Push한다.
여기서 재귀는 A라는 함수에서 B라는 함수를 호출하는 것이 아니라, A라는 함수에서 다시 A라는 함수를 호출하는 것 이기 때문에 첫 번쨰 A에서 작업하던 자료들을 **활성 레코드에 저장**하고 다시 A로 들어가는 것이다.

# 재귀호출 쓰는 이유

사실 조금 이상하다.
앞서 우리는 factorial을 반목문을 사용해보기도 하고 순환도 사용해봤는데, 반복은 그냥 변수에 곱을 누적하면 되는데, 굳이 활성 레코드의 스택 call 까지 하면서 해야할 필요가 있을까?

나도 학습하다 너무 궁금해서 찾아보았는데, 2가지가 있다고 한다.

1. 알고리즘 자체가 재귀적으로 표현하기 자연스러운 경우 (가독성)
2. 변수 사용을 줄여줌

1번은 누구나 공감할 수 있다.
하지만 2번을 보면, 변수 사용을 줄여준다는 것은 큰 특징이 있다.

바로 변경 가능한 **Mutable state**를 제거해서 프로그램의 오류 발생 가능성을 줄인다는 것이다.

## 조금 더 생각해볼까?

혹시 피보나치 수열에 대해서 들어본 적이 있나?

피보나치 수열은 다빈치 코드에서 등장해서 더 유명해졌다고 하는데, 일상에서 자주 볼 수 있는 것들의 황금 비율이 바로 피보나치 수열이라고 한다.
자세한 것은 [Golden spiral](https://en.wikipedia.org/wiki/Golden_spiral) 에서 확인할 수 있다.

본론으로 돌아와서 피보나치는 수식을 보면 더욱 잘 이해가 될 것이다.

`fibonacci = 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ...` 으로 이어지는 수열인데, n번째 수는 n-1 번째 수 + n-2 번째 수로 구성되어져 있다.
배열로 좀 더 보기 쉽게 변형해보면,

```java
fibonacci[] = {1, 1, 2, 3, 5, 8, 13, 21, 34, 55}

fibonacci[5] = fibonacci[4] + fibonacci[3]
fibonacci[4] = fibonacci[3] + fibonacci[2]
...
```

이다.
이 피보나치 수열을 재귀식으로 표현해보면 다음과 같다.

```java
public class Fibonacci {

    public static void main(String[] args) {
        System.out.println(fibo(50));
    }

    private static long fibo(int n) {
        if(n == 1 || n == 2) return 1;
        return fibo(n - 2) + fibo(n - 1);
    }
}
```

근데 여기서 문제가 하나 생긴다.
바로 중복 계산.

`fibo(10)` 을 계산하려면 `fibo(9)`와 `fibo(8)`이 구해져야 한다.

`fibo(9)`는 `fibo(8)` + `fibo(7)` => `fibo(6)` + `fibo(5)` ...
`fibo(8)`은 `fibo(7)` + `fibo(6)` => `fibo(5)` + `fibo(4)` ...

언뜻 보기에도 많은 중복이 생기는데, 이 중복이 바로 앞서 말 했던 **중복 대량 발생으로 인한 성능저하**이다.

_실제로 i9 프로세서에 16 DDR4 램을 보유한 나 맥북도 fibo(50)을 계산하는데 16.2초나 걸리게 된다._

이를 해결할 수 있는 방법이 바로 **메모이제이션**이라는 기법이다.

## Memoization

메모이제이션은 내가 연산한 값들을 메모해놨다가 필요할 때 다시 사용하는 기법을 말 하는데, 이 기법이 우리의 재귀호출 알고리즘의 성능을 크게 향상시켜 줄 녀석이다.

메모이제이션은 보통 static한 memo 배열을 생성하고, 우리의 재귀함수 내부에서 결과 값을 바로 return하는게 아니라 `memo[n]`에 담아서 반환한다.

그리고 우리의 재귀함수가 돌 때 마다 `memo[n]`에 값이 있었는지 먼저 확인하고 있었다면 저장된 값을 반환하고 없다면 직접 계산을 수행하고 반환한다.

```java
public class Fibonacci {
    private static long[] memo = new long[51];
    public static void main(String[] args) {
        int n = 8;
        System.out.println(fibo(50));
    }

    private static long fibo(int n) {
        if(n == 1 || n == 2) return 1;
        if(memo[n] > 0) return memo[n];
        return memo[n] = fibo(n - 2) + fibo(n - 1);
    }
}
```
