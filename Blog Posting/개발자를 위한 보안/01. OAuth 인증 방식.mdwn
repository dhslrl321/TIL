일반적인 웹 생태계에서 정보보안은 **사용자 별로 고유한 인증 정보**를 이용해서 접근을 제한한다.

만약 A라는 서버의 리소스들을 이용하기 위해서는 인가된 사용자인 USER 권한과 관리자인 ADMIN권한 그리고 권한이 없는 GUEST가 존재한다고 했을 때, 서버는 요청이 들어온 사용자가 각각 어떠한 권한을 갖고있는 사용자인지 구분할까?

- **GUEST** : 일반 방문자
- **USER** : 서비스의 사용자
- **ADMIN** : 서비스의 관리자

정답은 없겠지만 초기 보안 모델 Session Cookies 방식이었다.

# Session Cookie 인증 방식

> 해당 글에서는 OAuth 를 설명하기 위한 글로 자세한 Session Cookie 생략은 생략하겠지만 간단히 순서만 봐보자.

1. 로그인 요청
2. 세션에 로그인 한 사용자의 정보를 저장
3. 세션의 key를 클라이언트의 cookie 형태로 반환
4. 특정 리소스 요청을 쿠키와 함께 전송

[##_Image|kage@bkdXrr/btq5g5KowJV/peVnUHkjQVvPImDFMcLC6k/img.png|alignCenter|data-origin-width="750" data-origin-height="403" data-ke-mobilestyle="widthOrigin"|||_##]

이러한 인증 방식에는 몇가지 문제가 있었다.

1. 쿠키는 쉽게 탈취가 가능하다.
2. 매 요청마다 세션을 검증하는 로직이 필요하다.

그래서 나온 방식이 바로 **토큰을 사용하는 API Key 인증 방식**이었다.

# API-Key 인증 방식

API-Key 인증 방식은 **REST API 요청을 할 때 HTTP 헤더에 Authentication 의 값을 API-Key로 식별**하는 방식을 이용한다.

쿠키를 사용하는 Session Cookie 방식과는 다른 형태로 API-Key는 토큰(Key 문자열)을 이용하여 인증 정보를 확인한다.

API-Key는 서버에서 발급한 특정 문자열로 HMAC-SHA256, HMAC-MD5 를 많이 사용한다.

[##_Image|kage@8nsHU/btq5gFY8tgE/T4Oulvws3r13OQz2pPXVsK/img.png|alignCenter|data-origin-width="717" data-origin-height="276" data-ke-mobilestyle="widthOrigin"|||_##]

이렇게 된다면 어떤 장점이 있을까?

**장점**

1.
