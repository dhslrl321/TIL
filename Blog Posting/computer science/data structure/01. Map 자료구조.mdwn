# Map

- 정의
  - Searchable Entry Collections
  - 검색 가능한 key, value 쌍(pair) 의 데이터 묶음
    - key : unique data
    - value : normal data
- 종류
  - list-based map
    - unsorted, node list 로 구현
    - 데이터를 탐색하기 위하여 선형 탐색 알고리즘을 이용
    - 시간 복잡도는
      - O(n)
    - 특징
      - 구현하기 쉽지만 데이터 개수가 적을때만 효율
  - hash table
    - entry 를 저장하기 위한 주소로 key 를 이용
    - 탐색에 해쉬값을 이용
    - 시간 복잡도가 대부분 O(1)
- 기술
  - Map은 탐색 속도가 뛰어나 맵 리듀스나 NoSql 에서 사용
  - Python 의 딕셔너리와 같은 존재

# 해시 함수

- 키 값을 입력으로 받아 해시 테이블상의 주소를 반환
- 구현 방법
  - 나누기 방법
    - `h(x) = x mod m`;
    - 나머지 연산을 이용하여 확률적으로 좋은 분포를 갖도록 함
  - 곱하기 방법
    - `h(x) = [m(xA mod 1)]`
    - 해시 테이블 크기보다 큰 수를 해시 테이블 크기 범위

# 해시 충돌

- 한 주소를 두고 두 개 이상의 원소가 자리를 다투는 것
- 한 원소를 해싱 해서 저장하려는데 다른 원소가 이미 그 자리를 차지한 상황
- 해결 기법에는 2가지가 존재
  1. 체이닝
  2. 개방 주소 방법

# Java API의 HashMap 과 HashTable

- HashTable
  - JDK 1.0 에 존재하는 API
  - 하위 호완을 위한 제공
- HashMap
  - Collections Framework 에 속한 API
  - 보조 해시 함수 (Additional Hash Function) 을 사용
    - 해시 충돌 가능성이 더 낮음 : 성능상 이점
- Map 인터페이스를 상속받고 있기 때문에 서로 제공하는 기능은 동일함
- **키에 대한 해시 값을 사용하여 값을 저장하고 조회**
