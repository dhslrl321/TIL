# Adapter 패턴

- 클래스의 인터페이스를 사용자가 기대하는 인터페이스의 형태로 변환 시킴
- 서로 일치하지 않는 인터페이스를 갖는 클래스를 함께 동작 시킴
- 인터페이스 호환성 문제 때문에 같이 쓸 수 없는 클래스를 연결시켜서 함께 사용 가능
- 가령 HDMI 단자가 없는 맥북 프로에서 HDMI To TypeC 젠더를 이용하는 것 처럼
  - 맥북 프로 : 인터페이스 1
  - HDMI 단자 : 인터페이스 2
  - HDMI To Type C : 어댑터

# 참여 객체

- Client
  - 말 그대로 Client, 호환성이 맞지 않는 라이브러리나 외부 시스템을 사용하려는 쪽
- Adaptee
  - 호환성이 맞지 않는 라이브러리나 외부 시스템
- Adapter
  - Client와 Adaptee 중간에서 호환시켜주는 역할
  - TargetInterface를 구현하며 이를 해결
- TargetInterface
  - Adapter가 구현하는 인터페이스
  - Client가 TargetInterface를 이용해서 호환

# 순서

1. 클라이언트는 Target Interface를 통해서 어댑터로 요청
2. 어댑터는 클라이언트의 요청을 Adaptee가 이해할 수 있는 방법으로 전달
3. Adaptee가 처리

# 예시

- 여객기만 운전할 수 있는 파일럿에게 헬리콥터까지 조종하라는 명령이 존재할 때, 헬리콥터 어댑터를 만들어서 사용함
- 비행기는 `takeOff` 를 이용하지만 헬리콥터는 `liftOff()`를 사용함
  - `takeOff()`는 활주로를 타고 이륙
  - `liftOff()`는 활주로에서 수직 이륙
- 참여 객체
  - Client
    - `Pilot`
  - Adaptee
    - `Apache64`
  - Adapter
    - `AirlinerAdaptor`
  - TargetInterface
    - `Airliner`

### 장점

- 특정 모듈에 종속적이지 않고 어댑터만 변경시킬 수 있다.
- 제공 받은 프레임워크의 내부 동작을 변경하지 않아도 된다.
