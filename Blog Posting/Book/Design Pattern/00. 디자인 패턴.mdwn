# 디자인 패턴

- 객체 지향 프로그래밍을 설계할 때 자주 발생하는 문제들을 피하기 위해서 사용되는 패턴
  - 프로그래머가 만나는 문제는 *지구상에 유일한 문제*가 아니다. 이미 누군가는 부딪힌 문제이니 전문가들이 기존에 해결책을 마련해놓은 것들을 이용하자.
- 하지만 디자인 패턴을 맹신하지는 말자
  - 패턴 병이라고 해서 모든 문제에 디자인 패턴을 적용하려고 하는 것은 좋지 않다.
  - 패턴보다 중요한 것은 **코드 베이스의 간결성**이다.
  - 디자인 패턴 적용이 굳이 필요 없는 경우는 적용하지 않는게 상책
  - 해당 패턴을 아는 것 보다 **해당 패턴이 왜 효율적인지를 아는 것**이 훨씬 중요하다.

## 목적과 범위에 따른 디자인 패턴

- 디자인 패턴은 **목적**에 따라서 **생성, 구조, 행위** 패턴으로 나눌 수 있다.
- 디자인 패턴은 **범위**에 따라서 **클래스를 대상으로, 객체를 대상으로** 하느냐로 나눌 수 있다.

- 생성(클래스), 생성(객체)
- 구조(클래스), 구조(객체)
- 해위(클래스), 행위(객체)

## 생성 패턴

- 객체 **생성**에 관련된 패턴
- 객체의 생성과 조합을 캡슐화해 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 크게 받지 않도록 유연성을 제공한다.
  - 추상 팩토리
  - 빌더
  - 팩토리 메서드
  - 프로토타입
  - 싱글턴

## 구조 패턴

- 클래스나 객체를 조합해서 더 큰 구조를 만드는 패턴
- 예를 들어 서로 다른 인터페이스를 지닌 2개의 객체를 묶어 단일 인터페이스를 제공하거나 객체들을 서로 묶어 새로운 기능을 제공하는 패턴
  - 어댑터
  - 브리지 패턴
  - 컴퍼지트 패턴
  - 데커레이터 패턴
  - 퍼사드 패턴
  - 플라이웨이트 패턴
  - 프록시 패턴

## 행위 패턴

- 객체나 클래스 사이의 알고리즘이나 책임 분배에 관련된 패턴
- 한 객체가 혼자 수행할 수 없는 작업을 여러 개의 객체로 어떻게 분배하는지, 또 그렇게 하면서도 객체 사이의 결합도를 최소화 하는 것에 중점.
  - 책임 연쇄
  - 커맨드
  - 인터프리터
  - 이터레이터
  - 미디에이터
  - 메멘토
  - 옵저버
  - 테이트
  - 스트래터지
  - 템플릿 메서드
  - 비지터

## 생성 패턴

- 추상 팩토리
- 팩토리 메서드
  - 템플릿 메서드
- 빌더
- 프로토타입
- 싱글턴

## 구조 패턴

- 어댑터
- 브리지 패턴
- 컴퍼지트 패턴
- 데커레이터 패턴
- 퍼사드 패턴
- 플라이웨이트 패턴
- 프록시 패턴

## 행위 패턴

- 책임 연쇄
- 커맨드
- 인터프리터
- 이터레이터
- 미디에이터
- 메멘토
- 옵저버
- 테이트
- 스트래터지
- 템플릿 메서드
- 비지터
