# 생성 패턴

- 객체 생성과 관련된 패턴
- 객체의 생성과 조합을 캡슐화 하여, 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 받지 않도록 유연성을 제공하는 것이 목적

# 추상 팩토리, Abstract Factory 패턴

- 구체적인 클래스에 의존하지 않고, 서로 연관되어있거나, 의존적인 **객체들의 조합 혹은 집합**을 만드는 인터페이스를 제공하는 패턴
  - 관련성 있는 여러 객체를 일관된 방식으로 생성할 때 유용
- **관련 있는 객체의 생성을 가상화**
- 클라이언트에서는 실제로 어떤 객체가 생성되었는지 알 필요가 없음.

# 참여 객체

- AbstractFactory
- ConcreteFactory : 구상 클래스로 서로 다른 객체의 집합
- AbstrcatProduct
- ConcreteProduct

# 비행기를 만들 때로 예를 들자면

- AbstractFactory **객체 군**
  - AirplaneFactory
- ConcreteFactory **(제품 군)**
  - A380Factory (에어버스 380-여객기)
  - Boeing747Factory (보잉 747-여객기)
  - F22Factory (F 22-전투기)
- AbstrcatProduct
- ConcreteProduct

# 장점과 단점

### 장점

### 단점
