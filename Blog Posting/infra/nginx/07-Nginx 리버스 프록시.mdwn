# Proxy

- 클라이언트 대신 서버에게 요청 하고 응답
- 캐시로 자원 저장 및 아용 (네트워크 비용 감소)
- 프록시 서버를 거치는 요청 및 응답을 모두 확인할 수 있음 (로깅 가능)
- 필터링 할 수 있음 (보안성 향상)
- TransCoder (데이터 압축, 언어 변환 가능)

- Forward Proxy : 클라이언트 대신 요청을 보냄
- Reverse Proxy : 서버의 응답 대신 클라이언트에게 전달
  모두 위의 기능을 수행할 수 있다.

## Forward Proxy

**클라이언트 대신 요청을 보냄**
클라이언트가 naver.com에 연결하려고 하면 사용자 PC가 직접 연결하는게 아니라 포워드 프록시가 요청을 받아서 naver.com에 연결하고 그결과를 클라이언ㅌ한테 전달해줌

- 주로 유저나 유저의 망 관리자가 설치
  대개 캐싱 기능이 있어서 성능적으로 이득볼 수 있음.
  **특징**

1. 캐싱 (네트워크 비용 감소)
2. 익명성
3.

## Reverse Proxy

**서버 대신 클라이언트의 요청을 받음**
글라이언트가 naver.com에 데이터 요청하면 리버스 프록시가 요청을 받아서 내부 서버에서 데이터를 받은 후 데이터를 클라이언트한테 전달.

- 서버 관리자가 설치

**보안 측면에서 이득**

**특징**

1. 캐싱
2. 보안
3. Load balancing

## Load Balancimg

# Nginx Reverse Proxy

1. 클라이언트가 웹 서비스에 데이터 요청
2. Reverse Proxy가 요청 받음
3. 웹 서버로 데이터 전송

**장점**

- 보안
- 포트 감추기
- 분산 처리 구성

## Nginx 에서 Reverse Proxy 설정하기

nginx.conf 파일에 수정함

```
server {
  listen 80 default_server;

  proxy
}
```
