# 의존성

- **객체 지향에서 설계란 의존성을 어떻게 다루느냐임**
- **용어**
  - 설계 : 코드를 어떻게 배치할 것인지에 대한 결정
    - 어떤 패키지에 어떤 클래스를 넣고 어떤 클래스에 어떤 코드를 넣는지
    - 설계의 핵심은 변경임
  - 의존성 : A가 B에 의존성이 있다고 하면 `A - - - > B` 점선
    - B가 변경되었을 때 A가 변경될 가능성이 있다.
    - 변경에 의해서 영향을 받을 가능성
    - 클래스 의존성 종류 4가지
      1. 연관관계 : A에서 B로 영구적으로 갈 수 있는 관계
      2. 의존관계 : A에서 B로 일시적으로 협력을 하고 헤어지는 관계
      3. 상속관계 : B가 바뀔 때 A도 같이 변경되는 관계 (extends) 구현이 바뀌었을 때 자식이 영향을 받음
      4. 실체화관계 : 인터페이스를 하는 관계 (implements) 인터페이스의 시그니쳐가 바뀌었을 때 영향을 받음
    - 패키지 사이의 의존성
      - 패키지 A내부의 어떤 것이 변경되었을 때, B의 패키지가 변경되는 것
      - `import` 가 있는데, 해당 패키지가 아닌 다른 패키지에 영향을 받는 것
- **객체지향 설계 가이드**
  - 양방향 의존성을 피하라
    - 성능 이슈
    - sync 문제
  - 다중성이 적은 방향을 선택하라
    - OneToMany 보다는 ManyToOne 을 선택하라
    - 해당 객체 관계를 유지하기에 많은 노력이 필요함
  - 의존성이 필요없다면 제거하라
  - 패키지 사이의 의존성 사이클을 제거하라
    - 무조건

# 주문 플로우

1. 가게 선택
2. 메뉴 선택
3. 장바구니담기
4. 주문하기
5. 주문 완료
