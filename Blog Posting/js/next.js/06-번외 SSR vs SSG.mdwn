next나 gatsby같은 기술에서 나오는게 ssr ssg임
실 사례로 보면어 어떤 기술이 잘 맞을지 확인해보자.

# ssr만 있던 최초의 웹 생태계

- 처음에는 static 한 html만 존재했을 시절에는 동적으로 페이지를 이용하지 못함.
- 요청마다 static한 html 파일이 클라이언트에게 전달됨.
- 그리고 php나 다른 것들이 나오면서 dynamic rendering이 가능해지고 template engine이 가능해짐
- 이런 server side 기술들이 html을 더 dynamic하게 만들어줌.
- 그래도 아직 서버에서 html을 렌더링한다는 건 똑가틍

# ajax 의 탄생

- ajax를 사용하면 전체 페이지를 새로고침 없이 데이터를 비동기로 가져올 수 있다.
- 그래서 화면 깜빡임 없이 특정 부분만 변경 가능
- 그런 특정 부분만 다루는 비동기 데이터, 비동기 컴포넌트등이 나오기 시작
- 이때부터 client rendring이 탄생
- 그리고 등장한게 제이쿼리
- 요즘은 리액트 뷰 앵귤러 사용

# csr

이제 서버와 html 파일을 통신하지 않는 컨셉이 탄생
이게 바로 scr

- 모든 html 파일과 데이터가 크라리언트측에서 생성됨.
- 서버는 json이나 xml 데이터를 주고받으면서 우리 클라이언트에서 js 를 통해서 hmtl을 생성하는 방식이 발전함.
- 이게 spa로 발전하기 시작.
- 이제 완전히 html 데이터는 클라ㅣ언트에서 렌더링되기 시작
- 여기서 문제 발생

문제

1. seo
2. 성능

**seo**
seo는 웹 크롤러가 웹 사이트를 읽고 인덱싱하면서 웹 페이지가 검색 엔진에 노출될 수 있게 하는데, 이게 어떤 방식이냐면
spa는 사용자의 요청과 상호작용으로 html을 동적으로 생성해내서 seo가 안됨.

**성능**
페이지를 렌더링할라믄 브라우저에서 js를 실행해야되니까 cpu 성능이 안 좋은 모바일에서 작업이 느려질 수 있음.
그

# 다시 srr을 사용하기 시작

- 최초와 다른점은 html을 생성하기 위해서 tempalte engine 이나 jsp처럼 서버측 프로글매ㅣㅇ 언어를 사용하는게 아니라 아니라 최신 js 라이브러리와 프레임웤을 사용한다는 점이 차이가 있음.
- 그리고 spa랑 다른점은 같은 js react를 쓰더라도 클라이언트에서 동적으로 페이지를 생성해내지 않는다느게 다름

# ssr

서버에서 미리 dom을 렌더링
이제 진짜 ssr 해볼 차례
spa의 csr과 다르게 ssr은 html을 return 해줄 서버가 필요함.

과정

1. 사용자 요청
2. 서버가 페이지의 html 파일 생성
3. 서버가 html을 반환
4. 브라우저는 html을 렌더링

여기서 만약 **서버가 매 요청마다 항상 같은 페이지를 리턴해준다면 ㅈㄴ 비효율 아님?**이라고 질문할 수 있는데, 여기서 SSG가 나옴

# ssg

만약 페이지가 사용자와 상호작용해서 데이터가 동적으로 변한다면 ssr을 하는게 맞지
근데 출력이 항상 동일해 예를들어서 about 페이지처럼. 그럼 항상 출력을 재생성하는게 쌉비효율.
그래서 이 데이터를 캐싱해서 static 하게 빠르게 사용하게 한다는게 컨샙

# 결론은 뭘 써야되는데?

## ssr

- 표시된 모든 데이터가 항상 최신의 데이터일 때
- 자주 변경될 수 있는 사용자별 및 동적 데이터일 때,

렌더링할 서버가 필요.
비용 비쌈

## SSG

- 정적인 정보를 항상 보여줄 때
- 동적인 데이터가 없을 때

만약 새로운 데이터를 표시하려면 다시 build 해야됨.
