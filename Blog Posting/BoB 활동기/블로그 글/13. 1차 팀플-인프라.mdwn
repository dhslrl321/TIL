- 인프라 구성
  - nginx를 Reverse Proxy로 사용하기
    - nginx.conf 와 Dockerfile
    - 컨테이너 이름으로 통신하는거 신기함 이거 이유 알아야함
  - 도커
    - 도커라이징
    - 프론트에서의 .env
    - 백엔드의 ARGS
- 배포와 패키징
  - 배포 과정
    - SaaS 에서 On-Premise 로 바뀜
    - 도커 컴포즈
  - 만났던 문제들
    - 원래 예정 : 쉘 스크립트로 conf 파일만 수정
    - 바뀐점 : 직접 docker-compose.yml 을 수정하는 방향
    - 결국 shell-script

> [Best Of the Best 활동기] 1차 팀 프로젝트 후기 - 보리밥

오늘은 BoB 10기 보안제품개발 트랙의 **보안 솔루션 제작** 수업에서 한달동안 진행한 1차 팀 프로젝트에 대해서 이야기해보려 한다.

[##_Image|kage@cATJTt/btrcVjnrZXl/puTpQwDj6NkmgKV4ItNkw1/img.png|alignCenter|data-origin-width="960" data-origin-height="462" data-ke-mobilestyle="widthOrigin"|||_##]

> 해당 글은 총 2부작으로 **팀 빌딩과 협업 과정** 그리고 **서비스 설명 및 개발 과정** 으로 나뉘어져 있습니다.

- 1차 팀 프로젝트 [팀 빌딩 및 협업 과정]()
- 1차 팀 프로젝트 [프론트엔드를 개발하며 했던 고민들]()
- 1차 팀 프로젝트 [백엔드를 개발하며 했던 고민들]()
- 1차 팀 프로젝트 [인프라를 개발하며 했던 고민들]()
- 1차 팀 프로젝트 [배포와 패키징에서 만난 문제와 고민들]()

---

지난 시간은 Back End 를 Spring Boot로 구성하며 했던 기술적 고민과 문제들에 대해서 이야기를 했었다.

오늘은 Front와 Back 을 적절히 나눠주는 인프라에 관한 이야기를 해보려 한다.

아래 그림은 우리가 설계한 아키텍쳐이다.

[##_Image|kage@bGhBq9/btrcRpOAJc3/j6WuOTI1ke7rsdSNXKmal1/img.png|alignCenter|data-origin-width="687" data-origin-height="400" data-ke-mobilestyle="widthOrigin"|||_##]

우리 서비스를 자세히 본다면 Nginx가 위치해 있는 것을 알 수 있다.

우리는 하나의 Computing Machine 에서 2개의 서버가 돌아가고 있다.

1. React View 를 Render 할 웹서버
2. API를 반환할 WAS

이 둘을 나는 하나의 Port로 합치고자 하였다.

사실 두 개의 포트를 열어서 운영하는 방법도 있겠지만, SSL 통신이나 추후 SaaS로 발전해 인증 로직이 있다면 하나의 포트로 운영하는 것이 더 좋아보였다.

그래서 이를 위한 방법으로 **Reverse Proxy**를 구성하려 했다.

Reverse Proxy는 Nginx를 사용했는데, 그 이유로는 Nginx가 비동기 처리를 해서 더 빠르다 뭐다 하는 장점이 있겠지만 나는 순수하게 **내가 써봐서** 였었다..

이게 타당하지 못한 기술 선정의 이유가 될 수 있지만 우리 조직 내부에서는 **개발과 구현이 한 시가 급했기 때문에** 이 마저도 타당한 것이 되어버렸다 ㅎㅎ..

아무튼 이 과정에서 어떤 설정을 했었는지를 공유해보려 한다.

# Nginx의 Reverse Proxy

나는 모든 서버를 **컨테이너 환경**에서 구동하고자 하였다.

그래서 다음과 같이 nginx.conf 파일을 정의해주고 Dockerfile 을 만들어 dockerizing 을 하는 방향으로 갔다.

```conf
user  nginx; # nginx 의 권한 설정
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  upstream front-server {
    server front-container:5000;
    keepalive 100;
  }

  upstream backend-server {
    server back-container:8080;
    keepalive 100;
  }

  server {
    listen 80;
    server_name localhost;

    location / {
      proxy_pass http://front-server;

      proxy_set_header HOST $host;
      proxy_set_header Referer $http_referer;
    }

    location /api {
      proxy_pass http://backend-server;

      proxy_set_header HOST $host;
      proxy_set_header Referer $http_referer;
    }

    error_page 500 502 503 504 /50x.html;
    location = 50x.html {
      root /usr/share/nginx/html;
    }
  }
}
```

그리고 Dockerfile 은 다음과 같이 구성하였다.

```Dockerfile
FROM nginx:latest

WORKDIR /proxy

COPY ./nginx.conf /etc/nginx/nginx.conf

RUN rm -rf /etc/nginx/conf.d/default.conf

ENTRYPOINT ["nginx", "-g", "daemon off;"]

EXPOSE 80
```
