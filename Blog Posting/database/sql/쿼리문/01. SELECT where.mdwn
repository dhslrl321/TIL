# select

- `select .. from .. where` 특정 조건 조회
- `select .. from .. where .. between .. and ..`

### What We gonna do

- SELECT 문의 기본 속성
  - BETWEEN A AND B
  - `IN()`
  - `LIKE()`
- SELECT 의 서브 쿼리
  - ANY
  - ALL / SOME
  - `ANY !=` 로 표현되는 `IN()`

## BETWEEN A AND B

특정 A와 B 사이의 값 조회하는데, **연속적인 값**에만 해당이 된다.
예를 들어서 키를 저장하는 height column이 있다면 다음과 같이 설정할 수 있다.

```sql
select name from usertb1 where height between 180 and 183;
```

그럼 180에서 183은 연속적인 값이므로 **between** 속성이 사용가능하다.

하지만 지역을 저장하는 addr이라는 칼럼이 있다면 **between** 속성 대신 **or** 속성을 사용해야한다.

```sql
select name from usertb1 where addr = '경남' or addr = '전남' or addr = '경북';
```

## IN()

위에서 봤듯 연속적이지 않는 값들을 사용할 때는 조금 불편할 수 있다.
이런 점을 보완하기 위해서 탄생한 것이 바로 **이산적인 값을 위한 IN()**이다.

```sql
select name from usertb1 where addr = '경남' or addr = '전남' or addr = '경북';
```

을 in()을 사용해서 더 깔끔하게 할 수 있다.

```sql
select name from usertb where addr in('경남', '전남', '경북');
```

## LIKE

name에 김씨를 찾으려면 LIKE와 같은 문자열 검색 연산자를 이용한다.
2가지 Like 연산자의 키워드가 있다.

- 무엇이든 허용 `%`;
- 한 글자와 매칭 `_`;

```sql
select name from usertb1 where name like "김%";
```

이렇게 되면 김으로 시작되는 모든 문자열을 검색한다.
이름은 물론이고 **김은 참 맛있네요**라는 문자열도 김으로 시작하므로 검색된다.

```sql
select name from usertb1 where name like "김__";
```

`_`는 한 문자와 매칭된다.
그래서 위의 sql문은 김OO인 사람은 모두가 검색되지만 **김은 참 맛있네요**처럼 조건에 맞지 않는 문자열은 검색되지 않는다.

## 서브 쿼리

서브 쿼리는 **쿼리문 안에 쿼리문**을 작성하는 것을 뜻한다.
예를 들어서 우리는 김경호라는 사람보다 키가 큰 사람들 모두를 찾고싶다.
그럼 직접 김경호의 키를 확인한 뒤 쿼리문을 다음과 같이 작성해야한다.

```sql
# 우선 김경호의 키를 찾자.
select height from usertb1 where name = '김경호';

# 김경호의 키를 찾았으니 해당 키보다 더 큰 사람들을 찾자.
select name, height from usertb1 where height > '172';
```

이렇게 2번 쿼리문을 사용해야만 한다.
하지만 이것을 서브쿼리문을 이용한다면 쉽게 줄일 수 있다.

```sql
select name, height from usertb1 where height > (
	select height from usertb1 where name = '김경호');
```

하지만 이런 서브쿼리에도 제약사항이 존재한다.

**서브쿼리는 하나의 값만 반환해야한다.**

이런 서브쿼리 제약을 유연하게 사용하는 방법이 바로 **ANY/ALL/SOME**이다.

## 서브 쿼리와 **ANY/ALL/SOME**

### ANY

위에서 말 하길 서브쿼리는 **하나의 값만 반환**이라고 했는데, 이런 상황을 보자.

```sql
select name, height from usertb1 where height > (
  select height from usertb1 where addr = '경남';
)
>>> error Subquery returns more than 1row
```

`error Subquery returns more than 1row` 에서 보면 우리가 우려했던 상황이 나오게 된다.

`where addr = '경남'` 인 사람이 여러명이라서 그런데, 여기서 ANY를 사용하면 해결할 수 있다.

```sql
select name, height from usertb1 where height > any(
  select height from usertb1 where addr = '경남'
);
```

이렇게 사용하면 addr이 경남인 사람들 중 한 명의 키보다 크면 모두 select 하라는 뜻이다.
만약 addr 이 경남인 사람의 키 중 160과 180이 있다면 전체 table에서 키가 160 이상이면 모두 해당된다.

### IN

`= Any` 은 `In`과 완전히 동일한 의미이다.

```sql
select name, height from usertb1 where height = any(
  select height from usertb1 where addr = '경남'
);
```

을

```sql
select name, height from usertb1 where height = in(
  select height from usertb1 where addr = '경남'
);
```

으로 사용할 수 있다.

### ALL

조건 하나만 적용되는 ANY와는 다르게 ALL은 모두 포함되어야 하는 **AND** 성격을 지닌다.
