# 운영 서버 환경의 구성
운영 서버 관리의 세 단계중 **환경 구성**을 배워보자.

## 아키텍쳐

- 단일 서버 
- 어플리케이션/데이터베이스 서버 분리
- 서버 단위의 로드 밸런서
- 서버 내 앱 단위의 로드 밸런서

### 단일 서버

#### 장점
- 클리이언트의 요청과 응답을 처리하는 서버가 한 대.
- 서버 내에서 데이터베이스 접근
- 환경 구축이 용이
- 별도의 네트워크 설정 필요 없이 로컬호스트로 하면 됨.

#### 단점
- 하나가 장애가 발생하면 전체 서비스가 완전히 죽을 수도 있음
> 둘 중 하나가 자원을 모두 사용하거나, 서버 하드웨어에 장애가 생기면 전체 서비스가 죽음
- 데이터베이스와 서버가 같은 자원을 요구하므로 서버 자원을 효율적으로 사용하지 못 할 수도 있음.
- db특성상 포트나 아이피를 최소한으로 하는게 좋은데 웹 어플리케이션 특성상 IP주소와 포트번호에 대해 요청을 받을 수 있어야 한다는 것 때문에 보안성이 떨어짐
- 서버의 수를 여러 대로 늘려서 자원을 확장하는 스케일 아웃(scale out)이 힘듦.

### 어플리케이션/데이터베이스 서버 분리
#### 장점
- db랑 app server를 분리 시켰고 위에 나온 **서비스 장애 확률, 효율적 자원 이용, 보안성**과 같은 특성을 해결할 수 있다.
- 두 대의 서버를 이용하므로 구성이 좀 더 복잡해짐
- 서버 사이의 지연 시간과 네트워크 보안을 고려해야함

#### 단점
어플리케이션이 하나의 서버를 바라보므로 여전히 스케일 아웃이 힘듦

### 서버 단위의 로드 밸런서

#### 특징 및 장점
- 클라이언트가 서버와 직접하는 대신 로드 밸런서와 통신
- 로드 밸런서가 서버와 통신
- 로드 밸런서가 통신하는 서버는 여러대
- 스케일 아웃이 가능
- 일부 서버가 장애가 발생하면 로드 밸런서가 정상 서버에게만 요청을 하면 되므로 장애를 최소화
- 대표적으로 OSI 7 Layer 의 L4 스위치가 로드 밸런서 역할을 수행

#### 단점
- 모든 요청이 로드 밸런서를 통하므로 로드밸런서가 장애가 나면 나머지 서버가 장애가 생김
- 구성이 매우 복잡해짐

### 서버 내 앱 단위의 로드 밸런서
#### 특징 및 장점
서버 단위의 로드 밸런서에서 추가적으로 서버 내의 앱 단위의 로드 밸랜서
- 서버 안에서 똑같은 앱을 여러 프로세스로 만들어 실행하고 외부에서 들어온 요청을 프로세스 중 하나로 보내주는 역할
- 하나의 서버에 여러 프로세스로 여러 서버가 여러 요청을 받을 수 있음
- 서버 자원을 최대한으로 사용
- 효율적
