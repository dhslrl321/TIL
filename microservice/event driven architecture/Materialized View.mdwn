# Materialized View Pattern

- 하나의 결과 데이터 세트를 만들기 위해서 여러 곳에 산발된 데이터 소스, 스키마에 대해서 대한 미리 생성된 뷰를 생성하는 패턴
  - user, wallet, ticket 을 예로
- 핵심은 쿼리에 많은 비용이 드는 작업에 대한 결과를 저장해서 미리 채워진 뷰를 생성하는 것이다
  - 결과 데이터 세트에 대한 쿼리에 대한 결과를 저장하는 패턴
  - 구체화된 뷰를 생성한다고 표현함

# 구체화된 뷰 생성 방법

- 생성 방법
  - 배치 통해서 일정 주기동안 자동으로 뷰를 생성한다
  - 원본 데이터가 바뀌는 command 이벤트가 발생할 때 뷰를 생성한다.

# 어떤 때 구체화된 뷰를 사용 해야 할까

- 이벤트 소싱에서는 필수
  - 데이터를 수정한 이벤트만 저장하는 이벤트 소싱 패턴을 사용할 때는 구체화된 뷰가 필요하다.
    - 모든 이벤트를 검사해서 현재 상태를 결정해야 하기 때문에 구체화된 뷰가 유일한 선택지 일 수 있다
- 그 외에는 선택 사항
  - 수용하기 어려운 스토리지 용량 요구사항과 비용을 초래할 수 있음
  - 유용한 경우
    - 직접 쿼리하기 어려운 데이터에 대한 구체화된 뷰를 생성할 떄
    - DB 와 항상 연결을 유지할 수 없어서 가끔씩 연결하거나 연결이 끊어지는 상황을 고려할 때
    - 마이크로서비스를 사용하는 경우 데이터 스토리지를 느슨하게 결합된 상태로 유지할 때 데이터 통합

# 단점

- 데이터 일관성이 항상 보장되지 않는다
  - 뷰를 생성하는 시점에 원본 데이터를 변경한 경우, 일치하지 않을 수 있다.
