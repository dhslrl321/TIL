# Event Sourcing

- 데이터의 현재 상태의 결과만 저장하는 것이 아니라 데이터에 수행된 전체 작업을 추가 전용 저장소(event store) 에 저장하는 패턴
  - 데이터 모델과 비즈니스 도메인을 동기화할 필요가 없다
  - 확장성, 응답성이 향상된다.

# 기존의 문제점

- 기존 : 원본 데이터의 상태를 CRUD 를 통해 항상 업데이트한다.
  - 데이터를 업데이트 할 때, transaction lock 을 사용한다.
- 문제점
  - 성능 및 응답 속도가 저하된다.
  - 동시에 많은 사용자가 해당 row 에 작업을 수행할 때 lock 으로 인한 conflict 가 자주 발생할 수 있다.

# 해결 방법

- 각각 추가 전용 저장소에 애플리케이션 코드가 수행한 데이터의 변경 이벤트를 이벤트 저장소로 저장한다.
  - 이벤트 저장소에 저장된 이벤트들은 구체화된 뷰를 생성하는 데에 사용될 수 있다.

# 장점

- 이벤트는 뷸변하다
  - 트랜잭션 처리 중 (경합, 경쟁)이 없다
  - Presentation level 이나 UI 의 성능이 훨씬 향상된다.
- 이벤트 스토어는 단순 이벤트를 저장하기 때문에 구현과 관리를 분리하고 간소화 할 수 있다
- 이벤트 자체가 비즈니스에 대해 유용한 정보가 될 수 있다.

> 일반적으로 이벤트 소싱은 구체화된 뷰를 이용하여 CQRS 패턴과 결합될 수 있다.

# 문제 및 고려 사항
