# 레이어드 아키텍처

- 3개의 레이어로 분리
  - Presentation Layer (controller)
    - 클라이언트와 직접적으로 연결되는 연결부
    - API 엔드 포인트
  - Business Layer (service)
    - 실제 시스템이 구현해야하는 로직들
    - persistence와 presentation 사이에 위치
    - 도메인 레이어를 캡슐화하기 위해
  - Persistence Layer (domain)
    - DB 관련 처리하는 로직
    - DB에 저장, 수정, 읽기 역할을 수행
- 각각의 레이어는 위에서 말한 일 외에는 다른 역할을 수행해서는 안됨
  - 단방향 의존성 (Presentation -> business -> persistence)
  - 완전히 독립적으로 운영
- 레이어드 아키텍처를 잘 활요하기 위해서는 도메인 모델을 이용함
  - 도메인 모델: 데이터와 행위를 모두 아우르는 도메인 개념의 모델링
- 사용할 때 주의 사항
  - 컴포지트 패턴을 이용해서 OCP 원칙과 DIP 원칙을 지킬 수 있음
    - OCP: 기존의 코드는 닫혀있고, 새로운 코드에는 열려있는 원칙 (확장은 열려있고 수정은 닫혀야 한다.)
    - DIP: 의존성의 방향이 추상화 쪽으로만 이뤄져 상위 레벨의 모듈은 하위 모듈에 대한 의존성이 전혀 없음
