# Execution Context

실행 컨텍스트는 실행할 코드에 필요한 환경 정보를 모은 객체를 뜻한다.
이는, OS를 학습하다가 마주하게 되는 **실행 문맥, 실행 컨텍스트, 익스큐션 컨텍스트**와 다들 동일한 개념이다.

조금 쉽게 이야기 한다면
예를 들어서 우리가

```js
var a = 10;
function hello() {
  var b = "hello";
  return b;
}
```

와 같은 코드가 있다면 여기서 실행에 필요한 환경 정보는

`var a = 10`과 `hello()`함수와 `var b = 'hello'`가 있을 것이다.

식별자와 변수등과 같은 정보를 가리키고 있는 객체를 **실행 컨텍스트**라고 한다.

---

이런 실행 컨텍스트는 **콜 스택**에 의해 실행 환경에 대한 순서를 보장하는데, 순차적으로 코드를 Interpreting 하면서 콜스택에 추가한다.
그 말은 즉, 콜스택에 가장 위에 있는 부분이 우리가 현재 실행할 실행 컨텍스트임을 알 수 있다.

## 실행 컨텍스트가 생기려면?

그럼 어떤 정보들이 실행 컨텍스트가 될까?

하나의 실행 컨텍스트를 보통 우리는 **전역 공간**, **eval()함수**, **일반 함수**를 하나의 실행 컨텍스트라고 하는데 전역 공간과 `eval()`은 코드의 실행이 된다면 자바스크립트 엔진이 자동적으로 만들게 되는 것이다.
함수 컨텍스트는 일반적으로 우리가 함수를 호출한다면 함수에 대한 실행 컨텍스트가 생겼다고 보는 것이다.
그래서 우리가 만들게 될 실행 컨텍스트는 일반 함수뿐이다.

## 실행 컨텍스트를 위해 js 엔진이 갖는 객체

하나의 실행 컨텍스트를 실행하기 위해서는 js가 다음과 같은 것들을 실행 컨텍스트의 환경 정보를 객체로 실행 컨텍스트에 저장한다.

1. variableEnvironment : 현재 컨텍스트의 변수, 식별자 등을 최초의 상태인 스냅샷으로 저장하는데, Lexical으로 스냅샷을 구성한다.
2. LexicalEnvironment : VariableEnvironment와 동일하지만 실시간으로 변경 사항이 적용된다.
3. ThisBinding : 식별자가 바라보아야할 대상 객체를 지정한다.

## 실행 컨텍스트가 활성화 된다면

실행 컨텍스트가 활성화 되면 2가지 단계를 맞이한다.

1. Creation Phase
2. Execution Phase

```js
ExecutionContextES6 = {
  LexicalEnvironment = <ref. to LexicalEnvironment in memory>,
  VariableEnvironment = <ref. to VariableEnvironment in  memory>,
}
```

위에서 ThisBinding이 생략되었는데, ES6에서는 LexicalEnvrionment 과정에 포함된다.

여기서 우리는 `LexicalEnvironment`에 대해서 알아보자.
LexicalEnvironment은 실행이 된다면 3가지 일을 수행한다.

- **EnvironmentRecord**
- **ReferenceToTheOuterEnvironment**
- **ThisBinding**

### EnvironmentRecord

변수와 식별자, 인수에 대한 여러 정보를 저장한다.
이 과정을 거쳐야 해당 실행 컨텍스트에서 사용하게될 환경들을 구성할 수 있는데, 마치 사전 답사? 같은 느낌이 든다.

### ReferenceToTheOuterEnvironment

만약 `EnvironmentRecord`에서 변수와 식별자, 인수에 대한 정보를 찾지 못할 때, 상위 컨텍스트에 접근해서 찾는 일을 수행한다.

### ThisBinding

실제로 this의 값이 결정되는 부분이다. this에 관한 내용은 이야기할 부분이 많기 때문에 다음 포스팅에서 자세히 들어가보자.

1. 호이스팅
2. 외부 환경 정보 구성
3. this 값 설정
