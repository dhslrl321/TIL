- Action
- Reducer
- Store
- Dispatch
- Subscribe

# createStore

- 함수로 data를 넣을 수 있는 장소를 생성함.

- createStore는 state를 넣는 곳.
- state는 data가 바뀌는 지점임.(modify)
- 카운터앱에서는 num이 state가 되는거고.

```
const reducer = () => {};

const store = createStore(reducer);
```

- createStore는 store에 담겨야함.

근데 그 store에 담을 때 createStore의 매개변수로 리듀서 함수를 넣어야 함.
여기 createStore으로 생성하면 4개 함수 나옴

- dispatch
- subscribe
- getState
- replaceReducer

가 있음

# reducer

reducer는 **함수**인데, 데이터를 **수정하는** 함수임 ex) increase, decrease

만약에 reducer는 꼭 이름이 reducer라고 할 필요 없고 원하는대로 바꿔도 됨.
근데 그냥 우리는 리듀서라고 하고 통상적으로 쓰는데로 쓰자.

```
const countModifier = () => {
  return "hello";
}

const countStore = createStore(countModifier);

console.log(countStore.getState());
>>> hello
```

가 나옴

이게 어떤 원리냐면
reducer에서 return 하는 데이터가 곧 state가 되는거임

그럼 우리는 modifier한테 인자를 넘겨주고 그 넘겨받은 인자를 모디파이어 즉 리듀서가 적절히 조치를 취하고 리턴해주면 그건 우리의 새로운 state가 되는거임

핵심은 reducer만 데이터를 주무를 수 있엄.
그래서 상태로직을 분리하는거고.

# state

```
const reducer = (state = 0) => {
  return state;
}
const store = createStore(reducer);
console.log(store.getState());
>>> 0
```

여기서 state를 0 으로 명시하고 로그를 찍으면 reducer가 호출될 때 0으로 state가 넘어갔고 return 되었으니까 0이 출력되는거지.

그럼 여기서 우리는 어떤 방법을 써서 count++이나 count--를 해주면 우리가 원하는 기능이 동작하겠지

# Action

위에서 count++이나 count--를 해야된다고 했는데 그걸 어찌 구분하냐면 바로 action으로 구분함

```
const reducer = (state = 0) => {
  return state;
}
const store = createStore(reducer);
console.log(store.getState());
>>> 0
```

reducer의 두 번째 파라미터로 action이 들어감.

```
const reducer = (state = 0, action) => {
  return state;
}
const store = createStore(reducer);
console.log(store.getState());
>>> 0
```

action은 우리가 reducer과 소통하는 매개체야.
reducer에서 어떤 일을 할지 action으로 대화하는거고 reducer는 action에 따라서 return을 해주는거고.

근데 reducer한테 어떻게 action을 전해주냐면 store의 dispatch를 이용해서 전해줌

```
const reducer = (state = 0, action) => {
  return state;
}
const store = createStore(reducer);

store.dispatch({type: "action"})

>>> type: "Hello"
```

action 객체를 dispatch로 줌
그래서 dispatch로 action type를 보내고 if문으로 캐치해서 적절한 로직을 수행하는거지.

```
const reducer = (state = 0, action) => {
  if(action.type === "ADD") { return count + 1;}
  else if(action.type === "MINUS") { return count - 1;}
  else return count;
}
const store = createStore(reducer);

store.dispatch({type: "ADD"});
store.dispatch({type: "ADD"});
store.dispatch({type: "ADD"});
store.dispatch({type: "ADD"});
store.dispatch({type: "MINUS"});

console.log(store.getState());
```

# Subscribe

subscribe는 변화를 감지하는 함수임

```
const reducer = (state = 0, action) => {
  if(action.type === "ADD") state + 1;
  return state;
}
const store = createStore(reducer);

store.dispatch({type: "ADD"})
```

일케 ADD로 액션 타입이 들어가면 리듀서 함수에서 state + 1을 한다고 치면

여기서

```
const reducer = (state = 0, action) => {
  if(action.type === "ADD") state + 1;
  return state;
}
const store = createStore(reducer);

store.dispatch({type: "ADD"})

const onChange() => {
  console.log("changed");
}

store.subscribe(onChnage);
```

subscribe() 매개변수로 onChange() 함수를 주자.

state가 변화될 때 마다 onChange가 호출됨

위에선 if문 썼는데 이거 switch로 바꿔야됨.

```
const reducer = (state = 0, action) => {
  swtich(action.type) {
    case "ADD":
      return state + 1;
    case "MINUS":
      return state - 1;
    default:
      return count;
  }
}
const store = createStore(reducer);

store.dispatch({type: "ADD"})

const onChange() => {
  console.log("changed");
}

store.subscribe(onChnage);
```

일케

그리고
