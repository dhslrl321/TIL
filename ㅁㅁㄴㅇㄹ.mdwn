# Log

- Refund System
  - 외부 모듈의 환불 로직을 가지고 있음 (기능을 가지고 있음)
    - ? free 가 있던데?
- Refund API
  - 왜 이렇게 했을까?
    - 특정 모듈에 필요한 데이터만 받으면 Request 로 되겠다고 생각했다.
  - 기존에 refund 로직은 payment 에 있다
    - 우리가 새로 만든건 배포만 된 상태
- 사용처
  - API 가 여러 갈래로 나뉘어 진다면 클라이언트는 어떤 로직으로 처리할지 알아야 한다
    - ex) card 라면
  - 환불은 환불 (레거시 DB 랑 엮여있음)
    - Point 나 Card 나 Toss 가 같지 않다
- Point 환불
  - Point 도 환불이다 (Point 도 결제 Type 중 하나기 때문에)
  - 데이터가 다르다고 해서 성격이 다른건 아니다
- 안분?
  - 금액을 얼마나 어떻게 나눌지 정하는 것
  - 여러 개의 payment type 으로 결제된 내역을 refund amount 를 어떻게 줄 것인지
  - Payment Type 은 이미 API 에서 결정되어 내려온다.
- Payment 모듈에서는 `getAllocatedRefundableCashAndPoint` 이 Refund 프로젝트이다
- 유저가 환불하면 `RefundClub` 이 호출됨 그리고 `getAllocatedRefundableCashAndPoint` 이 호출됨
  - totalAmount 는 calculateEachFee 로 금액을 결정시킨다
  - usedCashPrice 가 원결제인데 (카드, vbank 인지 모름)
- 결제 타입에 따라서 달라지는 파라미터라면 결제의 key (주문 ID) 가 있으면 거기서 꺼내와서 사용하면 된다
- API 는 여러개로 나눌 필요가 없다.

## 배운것

- API 를 만들 때는 사용하는 쪽을 고려해서 만들라
- 끈질기게 완수님에게 물어보자
- 외부 인터페이스나 전반적인 컨셉은 중요하다
  - 대신 내부 구현은 리팩토링이 가능하기 때문에 중요하지 않다

# 두번째 미팅

- 주문과 취소를 분리?
  - CA 를 먼저 분리하고
- 남은 금액을 어디선가 tracking 해야 한다?
  - 남은 금액, 즉 환불 가능 금액
- 환불을 누군가에게는 요청을 해야함
  - 환불을 하기 위해서는 환불 가능 여부를 알아야 함
  - 환불 가능 여부를 누가 알고 있을까?
  - 결국 Refund 가 만들어진다
  - 환불하기 위해서는 남은 금액만 알면 된다?
- Lucid 의 ?? 클래스
  - 남은 금액을 알려주는 책임
    - 환불 가능 금액도 알고있다.
