서비스 인스턴스에서 Spring Boot Actuator 를 이용한 Config 정보 반영하기

#### 해당 글은 [Spring Cloud Config의 name, profiles 그리고 Github 를 연동해서 설정 파일 관리하기](https://wonit.tistory.com/503)에 의존하는 글입니다. 실습 환경을 따라하시려면 이전 글에 나온 실습을 따라하시길 권고드립니다.

### 목차

- **설정 정보를 반영하는 이유**
- **Spring Boot Actuator란?**
  - Spring Boot Actuator 의 기능과 Endpoints
  - Config Refresh
- **Spring Boot Actuator 를 이용해서 변경 정보 갱신하기**
  - User-Service에 Actuator 의존성 추가하기
  - refresh Endpoints 활성화
  - 원격 저장소에 있는 yml 설정 정보 변경하기
  - refresh 하기

# 설정 정보를 반영하는 이유

지금까지 Spring Cloud Config 의 많은 기능들을 알아보았고 실습했다.
현재 실습 내용 중에서 가장 중요한 것이 빠졌다.

#### 바로 **설정 정보 갱신**이다.

Spring Boot Application 이 최초에 빌드될 때 bootstrap.yml 과 application.yml 파일에 있는 정보를 이용해서 Application을 구동시킨다.

하지만 지금 상황을 봐보자.

[##_Image|kage@cPGnh6/btq3EJnoIRz/kJXfqLEsWYNdqI0SHDz8mk/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

최초에 Application 이 빌드될 시점에만 Config 서버로부터 설정 정보를 가져오고 해당 정보를 이용하기 때문에 **마이크로서비스들이 다시 빌드되지 않는 이상 설정 정보는 반영되지 않는다.**

그럼 이 상황에서 어떻게 해야할까?

답은 간단하다.

Spring Boot Application 을 다시 껐다가 키면 된다.

하지만 또 문제가 있다.

#### 우리의 마이크로서비스들은 단순하게 돌아가지 않는다. 실제로는 CI CD 파이프라인과 더불어 다양한 자동화에 엮여있을 텐데 수동으로 앱을 껐다가 켰다가 하는게 과연 옳은 방법일까? 만약 서비스가 100 개라면 다 껐다 켰다를 해야할까?

이 때 등장하는 것이 바로 Spring Boot Actuator 이다.

# Spring Boot Actuator

> Spring Boot includes a number of additional features to help you monitor and manage your application when you push it to production. You can choose to manage and monitor your application by using HTTP endpoints or with JMX. Auditing, health, and metrics gathering can also be automatically applied to your application.

Spring Boot Actuator 는 애플리케이션을 Production 으로 빌드할 때 이를 모니터링 하고 **관리하는 데 도움이 되는 기능**을 가진 라이브러리이다.
HTTP End Point 를 통해서 애플리케이션의 상태 관리 및 모니터링을 할 수 있도록 한다.

> 사실상 Actuator 를 이용한다고 해서 **설정 정보를 반영하기 위해서 껐다 키는 과정**을 생략할 수 있느 것은 아니다. 단지 조금 더 gracefully 하게 이 과정을 바꾸는 것이다. 한 번 껐다 키는데, 얼마나 이 과정이 우아해지는지 아래에서 실습해보도록 하자

## Spring Boot Actuator 의 다양한 기능과 Endpoints

Spring Boot Actuator 는 효과적인 애플리케이션의 모니터링과 관리를 위해서 다양한 기능을 제공한다.

이를테면 해당 application의 **bean 들이 어떻게 사용되고 관리되는가** 혹은 **현재 application의 상태(health)는 어떠한가** 그리고 **application을 shutdown 혹은 재기동**하는 방법들 까지 아주 다양하다.

### 대표적인 Endpoints 들을 봐보자.

- shutdown
  - _Lets the application be gracefully shutdown. Disabled by default._
- metrics
  - _Shows ‘metrics’ information for the current application._
- beans
  - _Displays a complete list of all the Spring beans in your application._
- health
  - _Shows application health information_
- httptrace
  - _Displays HTTP trace information (by default, the last 100 HTTP request-response exchanges). Requires an HttpTraceRepository bean._

등 다양한 기능이 존재하는데, 자세한 사항은 [Spring Boot Actuator 공식 문서](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints) 에서 확인할 수 있다.

이런 다양한 Endpoint 를 이용하기 위해서는 application.yml 에서 `management` 설정 값을 조작해주면 된다.

예를 들어서 **health 기능과 beans 기능**을 이용하려 한다고 가정해보자.

**우선 actuator 의 의존성을 추가해줘야 한다.**

```bash
implementation 'org.springframework.boot:spring-boot-starter-actuator'
```

그럼 다음과 같이 application.yml 에서 endpoint 를 include 해주자.

```yml
management:
  endpoints:
    web:
      exposure:
        include: health, beans
```

기본 설정 값으로 health와 info 가 지정되어있는데, 우리는 info 기능이 아닌 beans 기능을 추가하려 하니 위와 같이 직접 지정해주면 된다.

그리고 **Spring Boot Application**이 동작하는 서버를 향해서 `http://server.com/actuator/health`에 GET 요청을 보내면 다음과 같이 현재 상태의 정보가 나오는 것을 볼 수 있다.

[##_Image|kage@cvnSHz/btq3DwWqkWb/8zfYMFAWkvDOsN6IsIE6bk/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

## Config Refresh

Actuator의 Config Refresh는 서비스의 배포 및 빌드 없이 환경설정 변경 값을 업데이트 할 수 있다.

우리는 해당 기능을 이용해서 애플리케이션의 설정 값들을 **빌드와 배포 없이** 다시 받아오려 한다.

해당 Endpoint 를 활성화시키기 위해서 역시 application.yml 파일의 설정을 변경해줘야 한다.

```yml
management:
  endpoints:
    web:
      exposure:
        include: refresh
```

그리고 이번에는 GET 요청이 아닌 POST 요청을 보내야 한다.

만약 설정 정보가 변경된 이력이 있다면 **응답으로 어떤 값이 변경**되었는지를 받을 수 있다.

자세한 내용은 아래에서 직접 실습을 통해서 알아보자.

# Spring Boot Actuator 를 이용해서 변경 정보 갱신하기

이제 실제로 우리의 마이크로서비스 인스턴스인 User-Service 에 이 변경 사항을 적용시켜보려 한다.

> 우선 해당 실습을 위해서는 Spring Config 서버와 User-service가 기동되어 있어야 하는데, 만약 Config 서버와 마이크로서비스가 설정 변경을 확인할 수 있도록 환경이 구축이 되어있지 않다면 [Spring Cloud Config의 name, profiles 그리고 Github 를 연동해서 설정 파일 관리하기](https://wonit.tistory.com/503) 에서 확인할 수 있다.

우리는 다음과 같은 과정으로 실습을 진행하려 한다.

**실습 과정**

1. User-Service에 Actuator 의존성 추가하기
2. refresh Endpoints 활성화
3. 원격 저장소에 있는 yml 설정 정보 변경하기
4. refresh 하기

## User-Service에 Actuator 의존성 추가하기

우리가 지난 시간 구성한 User-Service 에서 Actuator를 사용할 수 있게 의존성을 추가해보자.

또한 bootstrap 을 이용해서 설정 정보를 로드할 것이기 때문에 bootstrap 의존성도 함께 필요하다.

```bash
implementation 'org.springframework.boot:spring-boot-starter-actuator'
implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
```

그리고 변경된 사항을 확인하기 위해서 User-Service 의 코드를 조금 수정할 것이다.

```java
@SpringBootApplication
@RestController
public class UserServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(UserServiceApplication.class, args);
    }

    @GetMapping("/config/database")
    public String database(@Value("${spring.datasource.driver}") String driver,
                           @Value("${spring.datasource.url}") String url,
                           @Value("${spring.datasource.username}") String username,
                           @Value("${spring.datasource.password}") String password,
                           @Value("${jwt.token.key}") String tokenKey) {
        return "driver: " + driver + "\n"
                + "url: " + url + "\n"
                + "username: " + username + "\n"
                + "password: " + password + "\n\n"
                + "token key: " + tokenKey;
    }
}
```

그리고 지난 시간 구성했던 Git 저장소에 있는 config 파일들은 다음과 같이 작성되어있다.

```yml
# application.yml
default:
  owner: config-service's git folder
  content: :) 안녕하세요 각각의 마이크로서비스에서 사용될 데이터입니다. :) 2

# user-service.yml
jwt:
  token:
    key: "{cipher}8fe09399c96cdc1bee0cc3dafea404335a5bdd879e4cd85547fd1e7fbe774e11b3adc2c20634d16501be77987bbc210f"

# user-service-test.yml
spring:
  datasource:
    driver: com.mysql.jdbc.Driver
    url: http://db.com
    username: test23
    password: test2
```

## refresh Endpoints 활성화

이제 actuator 의 endpoints 를 열러주도록 하자.

지난 시간 환경 설정을 따라왔다면 문제가 없겠지만 다시 한 번 외부 설정 관리를 위한 Config 서버의 주소도 적어보자.

```yml
spring:
  cloud:
    config:
      uri: http://localhost:8888
      name: user-service
      profile: test

management:
  endpoints:
    web:
      exposure:
        include: refresh
```

위의 내용은 bootstrap.yml 에 적어주도록 하자.

그리고 User 서비스를 실행시켜보자.

[##_Image|kage@bNhtRS/btq3z5ZA4Bw/BffIHh480aMuJZD4rwg7EK/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

> 해당 서비스는 계속해서 켜두자. 우리는 설정 정보를 **빌드나 재기동 없이** 반영하는 것이 목적이기 때문에!

## 원격 저장소에 있는 yml 설정 정보 변경하기

현재 Config 서버와 마이크로서비스들은 아래와 같은 구조로 되어있다.

[##_Image|kage@IqFPu/btq3GDfXxfD/f7WDBxootdB2MmbM5Wigm1/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

이제 Config 서버가 바라보고 있는 git 저장소에 있는 yml 파일들을 다음과 같이 수정해볼 것이다.

```yml
# application.yml
default:
  owner: config-service's git folder
  content: :) 안녕하세요 각각의 마이크로서비스에서 사용될 데이터입니다. :) 2

# user-service.yml
jwt:
  token:
    key: "{cipher}8fe09399c96cdc1bee0cc3dafea404335a5bdd879e4cd85547fd1e7fbe774e11b3adc2c20634d16501be77987bbc210f"

# user-service-test.yml
spring:
  datasource:
    driver: com.h2.Driver
    url: http://new-db-url.com
    username: admin
    password: admin
```

위와 같이 수정을 하고 원격 저장소에 push 를 보내자.

## refresh 하기

위에서 우리는 config 파일을 수정했기 때문에 실제 설정 정보는 변경이 되었다.

하지만 우리의 서버에는 변경 사항이 저장되지 않았다.

#### 이 때, Configuration 정보만 refresh 하는 Actuator의 Refresh 호출을 POST로 보내보자.

[##_Image|kage@dNqkCN/btq3DsNfXj5/ggsKO4JsuiCh7zAynlJXU0/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

그럼 어떤 정보가 변경되었는지 응답으로 위와 같이 받게 되고 서버에는 아래와 같이 새로운 정보가 반영되는 것을 알 수 있다.

[##_Image|kage@bKE8VH/btq3GGDLKfT/R8xnkiZQ9mmKyzivAtymx1/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]
