### 학습 순서

- 이벤트 객체란?
- 이벤트 등록, 삭제하기
  - `addEventListener()`
  - `removeEventListner()`
- 지금까지 배운 내용으로 Todo 리스트 만들어보기

# 이벤트 등록, 삭제하기

우리는 지난 시간 까지 HTML Element를 **등록, 수정, 삭제**하는 방법에 대해 학습하였다.

이번 시간에는 우리가 지난번에 만든 Element에 **이벤트**들 등록시켜보는 일을 할 것이다.

## 이벤트 등록하기

이벤트를 등록하기 위해서는 `addEventListener()` 메서드를 사용한다.

```js
target.addEventListener(type, listener, useCapture);
```

- target : 이벤트 리스너를 등록할 DOM 객체
- type : 이벤트 유형을 지정하는 문자열 (click 이벤트면 `"clicl"`, change 이벤트면 `"chage"`)
- listener : 이벤트가 발생했을 때 처리를 담당하는 콜백 함수
- useCapture : 이벤트 단계

기본적인 스펙과 사용 방법은 이러하다.

백문이 불여일타라 이제 실제 예제를 통해서 알아보자.

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Hello world</title>
  </head>
  <body>
    <span id="username">Hello 제 이름은 JANG 입니다.</span>
    <button id="btn">go</button>
  </body>
</html>
```

위와 같이 2 개의 태그로 구성된 HTML 파일이 있다고 가정해보자.

우리가 하고싶은 것은 다음과 같다.

#### **go** 라는 버튼을 클릭하면 span 태그에 있는 내용을 콘솔로 출력하는 것이다.

```js
const mySpan = document.getElementById("username");
const myBtn = document.getElementById("btn");

myBtn.addEventListener("click", () => {
  console.log(mySpan.value);
});
```

그럼 우리가 원하는 기능이 잘 구현되는 것을 볼 수 있다.

## 이벤트 삭제하기

이벤트를 삭제하는 방법에는 `removeEventListener`를 사용하는 것이 있다.

```js
target.removeEventListener(type, listener, useCapture);
```

인수는 `addEventListener`과 동일하다.
removeEventListener를 사용할 때 **익명 함수나 화살표 함수**로 등록된 이벤트는 삭제할 수 없지만 이벤트 리스너 내부에서 `removeEventListener`를 호출하면 삭제할 수 있다.
이 때에는 `listener에 arguments.callee`를 넘긴다.

_이벤트 삭제하기는 자주 사용하는 기능이 아니기 때문에 이번 글의 목적에 맞게 여기까지만 설명하도록 하겠다._

# 지금까지 배운 내용으로 Todo 리스트 만들어보기

지금까지 배운 내용으로 Todo List를 만들어보자.

우리의 todo 리스트에는 어떤 내용들이 들어가야 할지 먼저 생각해보자.

### 구현 목록

- 제목
- 투두 아이템 입력 폼
- 투두 아이템 등록 버튼
- 투두 리스트 렌더링

### 기능 목록

- Todo Item 등록
- Todo Item 삭제

## 프로젝트 세팅

우선 프로젝트를

```html

```
