# 도입

- 컴포넌트 앱을 기반으로 서비스 제작할 때 Root Container를 기반으로 트리 구조로 컴포넌트가 연결됨.
- 컴포넌트를 사용할 떄 상태 공유를 위한 컴포넌트와 각각 콜백을 내려줘서 state를 이용하는 컴포넌트를 따로 나눔 이를 Container Presenter 패턴이라고 함
- 데이터 바인딩을 하는 상태 공유 컴포넌트 에서는 비즈니스 로직이 들어있고 pure한 컨테이너에는 stateless한 로직이 들어있음.
- 실제 로직과 sideeffect를 컨테이너에서 관리하니까 테스트를 많이 해야됨.
- 근데 사용자에게 보여지는 view 컴포넌트도 신경써야 함.
- 예를 들어 한 프레젠터 컴포넌트에서 로그인 기능에 isLoading, length!==0, isDataNull 이라면 각각의 경우를 테스트 해야되는데 너무 비용이 많이 듬
- 이런걸 스토리북이 해결할 수 있음

# 스토리북 Storybook

##### UI 테스팅을 위한 간단한 UI 테스팅 툴

- 컴포넌트 기반 view를 위한 개발 환경
- 리액트를 타겟으로 개발이 되었지만 리액트에 국한된 라이브러리는 아님. vue, angular도 사용가능

### 스토리북 장점

- Fake State를 넣어줄 수 있어서 각각의 컴포넌트에 대한 테스팅이 빠르게 가능함.
- 연관된 컴포넌트는 하나의 Story로 정의해서 테스팅할 수 있음.
- 컴포넌트들을 묶어서 페이지 단위를 Story를 만들 수 있음.
- 또한 UI Flow를 만들어서 사용할 수 있음.
- 스토리북을 만드는 사람에 따라 다른 스토리를 만들 수 있어서 장점임
- VIew를 보여주기도 하고 개발자와 인터렉션 가능함.
- 스토리북 자체에 webpack이 있어서 하드리로딩 됨.
- viewport 별로 볼 수 있음

# 스토리북 사용

- 스토리북은 전용 cli가 있어서 간단
- 스토리북은 같은 project 디렉토리에 있어도 우리 프로젝트와 아예 별개다.

## 스토리북 설치

1. 의존성 추가

### 의존성 추가.

```
& yarn add global @storybook/cli
& getstorybook // 자동으로 설정
& yarn storybook
```

## story addon

스토리북에는 다양한 서드파티 애드온 라이브러리가 있음

- actions : 이벤트가 일어날 때 리액트 로그를 찍어줌
- links : user flow를 만들 때 유용하게 쓰임
- knobs : state를 타이핑해서 바로 주입시켜주는거
- console : 콘솔에 찍어주는거
- notes : 주석같은 애드온

# 개발 순서

1. behavior를 정의하고 state가 다 정의되고 flow/possible 정의
2. Stories first: 1단계에서 정의된 flow를 토대로 story 작성 (atomic 디자인 패턴이 빛을 발함)
3. 페이지가 나오기 시작하면서 검증하는 단계
4. 코딩 단계 + 스토리북 관리 단계

# TDD vs SDD

TDD : 유닛 테스트는 꼭 필요
SDD : 단순히 ui를 테스트하는거임
