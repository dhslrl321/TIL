# AWS의 로그인 방식

AWS에서 로그인을 수행한다면 2가지의 방식으로 수행할 수 있다.

[##_Image|kage@b1H2Wv/btqPe3ntK7q/T1FtKtVZ9SQuaClEZMk3bk/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

1. 루트 사용자.
2. IAM 사용자.

## 루트 사용자

우리가 일반적으로 실습 환경을 구축한다거나 개인 서버를 오픈 한다고 하면 AWS 회원가입이나 로그인을 수행한다.

우리가 AWS 계정으로 **회원가입이나 로그인**을 수행하면 우리는 모든 권한을 갖는 **SSO(Single Sign In) ID**로 시작하게 된다.

이 말은 우리가 **AWS의 모든 자원과 리소스를 이용할 수 있다는 이야기**가 되며, 그 말은 모든 자원을 **구매할 수 있다는 소리**이다.
만약 악의적으로 우리의 계정이 노출되면

## IAM 사용자.

---

# CI CD란?

CI CD 개념 자체는 지속성과 관련있다.
우리는 CI CD를 자동화의 개념으로 이야기를 하는데, 사실 CI CD 자체로만 보면 지속적인 무언가를 수행한다.

## Continuous Integration CI

우선 CI가 나타나게 된 배경을 생각해보자.
예전에 아마존이 빌드를 하면 하나의 거대한 코드를 만듬
그리고 빌드함
빌드 시간이 18시간이나 됨
그래서 이걸 줄이기 위해 마이크로서비스 아키텍처를 도입
이거랑 같은 개념으로 CI도 도입
빌드를 여러번에 나눠서 한다는 컨셉

한 번에 안 함

코드의 통합을 지속적으로 진행함으로 품질을 유지하는것

## Continuous Deploy CD

소프트웨어가 항상 신뢰될 수 있는 수준에서 배포될 수 있도록 지속적으로 관리하는 개념

CI로 빌드를 수행하면 CD로 배포를 한다는 느낌
CI 프로세스를 통해서 지속적으로 빌드와 테스트 하고, 통과한 코드를 배포에 반영하는 것으로
CI의 연장선상.
핵심은 **지속성**임.

## 이 둘을 정리하자면

CI = 빌드 및 테스트 자동화
CD = 배포 자동화

# CodeDeploy

Amazon EC2, AWS Fargate, AWS Lambda와 같은 서비스에서 CD를 제공하는 AWS 서비스

AWS CodeDeploy를 사용하여 소프트웨어 배포를 자동화함으로써 오류가 발생하기 쉬운 수동 작업을 제거할 수 있습니다. 배포 요구 사항에 맞게 서비스가 확장됩니다.

결국 CodeDeploy도 배포할 때 생기는 불필요한 반복 작업과 인간의 실수를 줄이기 위한 방법 중 하나임.

## 장점

1. 자동화 배포
2. 가동 중지 시간 최소화
3. 중앙 집중식 제어
4. 쉬운 도입

## 자동화 배포

CI에서 넘어온 코드는 품질 검증 끝난 코드만 넘어올 것임.
그럼 배포를 완전 자동화 해서 한 번 성공한다면 그 다음의 성공은 보장함.

## 가동 중지 시간 최소화

AWS 서비스를 이용한다면 배포 프로세스 시간동안 App의 가용성을 최대화 하도록 지원하고 App 상태를 추적함.

## 중앙 집중식 제어

AWS Management Console이나 AWS CLI로 쉽게 배포를 추적할 수 있음.
그리고 리눅스에 설치한다면 /var/aws/codedeploy/ 에 로그가 저장되어서 error tracing을 할 수 있음

## 쉬운 도입

이건 배우는 입장에서 잘 모르겠음.
어려웠음
근데 홈에서 말하는게, aws는 플랫폼이나 언어에 구애받지 않고 다 연결 가능해서 쉽고 동일한 배포환경을 제공한다고함.
