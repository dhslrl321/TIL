# 쿠버네티스 오브젝트

- 쿠버네티스는 모든 리소스를 오브젝트 형태로 관리
  - 쿠버네티스의 오브젝트를 확인할 때는 `kubectl api-resources` 로 확인
  - 특정 오브젝트의 간단한 설명은 `kubectl explain pod`
- 쿠버네티스는 대부분 yml 파일로 사용
  - 그래서 쿠버네티스는 yml 파일을 잘 작성하는 것

# 쿠버네티스 클러스터

- 컨테이너화 된 애플리케이션을 실행하기 위한 노드 머신
- 쿠버네티스를 실행한다면 클러스터를 실행하고 있는 것
- 쿠버네티스는 컨테이너를 오브젝트로 추상화 하여 클러스터 전체에서 사용
- 쿠버네티스에서는 상태 (state)를 이용하여 실행할 애플리케이션이나 이미지의 세부 구성 사항을 정의할 수 있음

# 쿠버네티스의 컴포넌트

- 쿠버네티스의 노드 역할은 크게 마스터와 워커로 구성
  - 마스터 노드 : 쿠버네티스가 제대로 동작할 수 있게 클러스터를 관리하는 역할
    - 컨트롤러 매니저
    - 스케줄러
    - DNS 서버
  - 워커 노드 : 애플리케이션 컨테이너가 생성
  - 모든 노드
    - 프록시
    - 네트워크 플러그인
    - kubelet

# 포드 : 컨테이너의 기본 단위

- 컨테이너 애플리케이션을 구동하기 위해 꼭 필요한 오브젝트
  - 포드
  - 레플리카셋
  - 서비스
  - 디플로이먼트
- 포드 : 컨테이너 애플리케이션의 기본 단위
  - 도커 엔진에서는 기본 단위가 도커 컨테이너
  - 쿠버네티스에서 기본 단위는 포드

# 포드 vs 도커 컨테이너

- 포드가 하는 일은 도커 컨테이너가 하는 일과 동일한데 왜 쿠버네티스틑 포드를 사용하는가
  - 여러 리눅스 네임스페이스를 공유하는 컨테이너들을 추상화된 집합으로 사용하기 위하여
