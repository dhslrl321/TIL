# 쿠버네티스 오브젝트

- 쿠버네티스는 모든 리소스를 오브젝트 형태로 관리
- 쿠버네티스 오브젝트는 쿠버네티스 시스템에서 영속성을 가지는 객체
- 쿠버네티스는 클러스터의 상태를 나타내기 위해 오브젝트를 사용한다.
- 오브젝트를 사용하면 다음과 같은 정보를 기술할 수 있다.
  - 어떤 컨테이너화된 애플리케이션이 동작 중인지
  - 해당 애플리케이션이 어떠한 리소스를 사용할 수 있는지
  - 해당 애플리케이션이 어떻게 배포되고 업데이트되며 스케일링할 수 있는지
- 쿠버네티스를 시스템은 해당 오브젝트의 생성을 지속적으로 보장하기 위해서 계속 작동하게 된다.
- 우리는 오브젝트를 생성, 삭제, 수정하기 위해서 지속적으로 상태 값을 변경하고 조작해야 한다.

# 오브젝트를 조작하는 방법

- 쿠버네티스 오브젝트를 조작하려면 쿠버네티스 API 를 사용해야 한다.
- 쿠버네티스 API 는 대표적으로 **kubectl** 을 이용해서 조작한다.

# kubectl

- kubectl
  - 쿠버네티스 클러스터를 제어하기 위한 커맨드라인 도구
- 구문
  - `kubectl [command] [TYPE] [NAME] [flags]` 형태로 명령을 실행한다.
  - command
    - 하나 이상의 리소스에서 수행하려는 동작을 지정
    - create, get, describe, delete
  - TYPE
    - 리소스 타입을 지정
    - 대소문자를 구분하지 않고 단수형, 복수형 혹은 약어를 사용할 수 있음
    - pods, pod, services, service, svc 등
  - NAME
    - 리소스 이름을 지정한다.
  - flags
    - 선택적으로 플래그를 지정하는데, `-s` 옵션이나 `-o` 옵션과 같이 옵션 값을 줄 때 주로 사용된다.
- 쿠버네티스는 대부분 yml 파일로 사용
  - 위와 같이 직접 터미널에 명령어를 입력할 수 있지만 우리는 다양한 일을 해야 함
  - 그래서 쿠버네티스는 yml 파일을 잘 작성하는 것

# 쿠버네티스 클러스터

- 컨테이너화 된 애플리케이션을 실행하기 위한 노드 머신
- 쿠버네티스를 실행한다면 클러스터를 실행하고 있는 것
- 쿠버네티스는 컨테이너를 오브젝트로 추상화 하여 클러스터 전체에서 사용
- 쿠버네티스에서는 상태 (state)를 이용하여 실행할 애플리케이션이나 이미지의 세부 구성 사항을 정의할 수 있음

# 쿠버네티스의 컴포넌트

- 쿠버네티스의 노드 역할은 크게 마스터와 워커로 구성
  - 마스터 노드 : 쿠버네티스가 제대로 동작할 수 있게 클러스터를 관리하는 역할
    - 컨트롤러 매니저
    - 스케줄러
    - DNS 서버
  - 워커 노드 : 애플리케이션 컨테이너가 생성
  - 모든 노드
    - 프록시
    - 네트워크 플러그인
    - kubelet

# 쿠버네티스 노드

- 컨테이너를 포드내에 배치하고 노드에서 실행시킴
- 노드는 클러스터에 따라서 가상 / 물리적 머신일 수 있음
- 포드를 실행하는 데 필요한 서비스를 포함함

# 쿠버네티스 한 줄 요약

- 컴퓨터 클러스터에 애플리케이션 컨테이너의 배치 및 스케줄링, 실행을 오케스트레이션하는 운영 수준의 오픈소스 플랫폼

# 클러스터

- 쿠버네티스는 클러스터를 이용하여 컨테이너화된 애플리케이션을 배포한다.
  - 이렇게 클러스터를 이용한다면 유연성과 가용성이 높아진다.
- 쿠버네티스는 애플리케이션 컨테이너를 클러스터에 분산시키고 스케줄링하는 일을 더욱 효율적으로 자동화 한다.

# 클러스터의 자원 2가지

- 클러스터의 2가지 자원
  1. 컨트롤 플레인 : 클러스터를 조율
  2. 노드 : 애플리케이션을 구동하는 worker

# 컨트롤 플레인

- 클러스터 관리를 담당
- 애플리케이션을 스케줄링 하거나, 항상성을 유지, 스케일링을 수행
- API Server를 제공 (Kubernetes API)
  - 컨트롤 플레인의 핵심인 HTTP API 를 제공하는 API 서버
  - 이를 쿠버네티스 API 라고도 부름
    - 해당 API를 우리는 kubectl 이라는 CLI 를 통해서 API 조작
    - 혹은 REST API 호출을 이용해서 직접 접근도 가능

# 노드

- 쿠버네티스 클러스터 내 워커 머신으로 동작하는 VM
- 실질적으로 애플리케이션을 구동하는 주체
- 노드 구성 요소 : kubelet + Container Runtime
  - 각 노드는 노드를 관리하고 컨트롤 플레인과 통신하는 kubelet 이라는 에이전트를 갖는다.
  - 컨테이너 운영을 담당하는 컨테이너 런타임을 갖는다.
- 운영 트래픽을 처리하기 위해서는 최소 세 대의 노드를 가져야 함
- 컨트롤 플레인이 제공하는 API를 이용해서 컨트롤 플레인과 통신

# 클러스터 설치하기

- 클러스터는 물리 및 가상 머신에 모두 설치 가능
- 개발 환경과 운영 환경에서 어떤 클러스터를 설치할 것인지 나뉨
  - 개발 환경
    - Minikube
    - Docker for Mac / Windows 에 내장된 쿠버네티스
  - 운영 환경
    - 온프레미스
      - kubeadm
      - kubespray
    - 클라우드 플랫폼
      - EKS
      - GKE
