마이크로서비스를 구성하기 위해서는 **기술적으로 많은 어려움이 수반된다.**

아래의 사진만 보더라도 **하나의 서비스를 구축하기 위해서 알야아 할 기술들이 굉장히 많다.**

[##_Image|kage@cpoo8F/btq2z0YKgQ1/vBxVPKrzJO1dDNE57OqTKk/img.png|alignCenter|data-origin-width="0" data-origin-height="0" width="500" height="NaN" data-ke-mobilestyle="widthContent"|||_##]

오늘은 여기에 나온 기술들의 특징과 어떤 역할을 수행하는지에 대해서 알아보려 한다.

### CNCF가 제시한 **표준 MSA 구성 요소**

CNCF는 지난 [Cloud Native Architecture](https://wonit.tistory.com/486?category=854727) 에서도 잠깐 언급한 Cloud Native Computing Foundation 단체이다.

CNCF 에서 마이크로서비스를 지원하고 관리하기 위한 구성 요소들을 다음과 같이 나눈다.

- [API Gateway 패턴](https://wonit.tistory.com/489) 블로그 설명 바로가기
- [Service Mesh](https://wonit.tistory.com/490) 블로그 설명 바로가기
- [Container Runtime](https://wonit.tistory.com/328?category=807010) 블로그 설명 바로가기
- [CI / CD](https://wonit.tistory.com/352) 블로그 설명 바로가기
- [Backing Server-Messaging](https://wonit.tistory.com/491) 블로그 설명 바로가기
- [Logging, Monitoring-Telemetry](https://wonit.tistory.com/492) 블로그 설명 바로가기
- [RESTful API](https://wonit.tistory.com/454) 블로그 설명 바로가기

# **Service Mesh**

[##_Image|kage@mE68z/btq2x5fyU7T/V3c1fkauieHK3Wch39ckR1/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

Service Mesh는 **마이크로서비스 간의 인프라 사이에서 원활하게 통신**을 수행할 수 있도록 하는 인프라 계층이다.

아키텍처 **내부**에서 요청이 어떤 지점으로 갈지 전달되는 방식을 추상화 한다.

#### 즉, 애플리케이션이 서로 데이터를 공유하는 방식을 제어하는 방법인 셈이다.

Service Mesh는 서비스와 클라이언트 사이에서 Aggregate 서버의 역할 즉, 일종의 **미들웨어**의 특성을 갖는다.

이러한 서비스 메쉬는 다음과 같은 역할을 수행한다.

1. 서비스 등록 : Service Registery
2. 서비스 검색 : Service Discovery
3. 각 서비스의 고유한 설정 정보를 하나의 프로젝트에서 관리 : Configuration Server
4. 프록시, 인증, 로드 밸런싱과 같은 기능 수행
5. 암호화

이러한 정보드를 **Dashboard**로 제공하는 경우도 있다.

[##_Image|kage@1mqWw/btq2EfNWVCe/pGKrNPyQjKcGwNUzi9kaH1/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

### 주요 특징, Service Register & Discovery

서비스를 새롭게 생성한다면 해당 서버에 대한 정보를 Service Mesh 에 존재하는 Discovery 서버에 등록한다.
그럼 각각의 마이크로서비스들의 IP 정보는 일일이 등록하지 않더라고 Discovery 서버가 관리하게 된다.

# API Gateway VS Service Mesh

API Gateway와 Service Mesh와 하는 일은 동일하다.
하지만 외부에 노출되는 것과 작동 위치에 따라 다른데, 이를 간단하게 표로 만들어보자.

<table style="border-collapse: collapse; width: 100%;" border="1" data-ke-style="style12"><tbody><tr><td style="width: 25%; text-align: center;"><b>이름</b></td><td style="width: 25%; text-align: center;"><b>수행하는 일</b></td><td style="width: 25%; text-align: center;"><b>적용 위치</b></td><td style="width: 25%; text-align: center;"><b>외부 노출 여부</b></td></tr><tr><td style="width: 25%;"><b>API Gateway</b></td><td style="width: 25%;">라우팅, 인증, 모니터링, 서비스 검색, 서비스 등록</td><td style="width: 25%;">Client-to-Server</td><td style="width: 25%;">Yes</td></tr><tr><td style="width: 25%;"><b>Service Mesh</b></td><td style="width: 25%;">라우팅, 인증, 모니터링, 서비스 검색, 서비스 등록</td><td style="width: 25%;">Server-to-Server</td><td style="width: 25%;">No</td></tr></tbody></table>

> 그럼 API Gateway냐 Service Mesh냐 사이에서 어떤 것을 써야 할까?
> 정답은 없다. 사용되는 위치는 조금 다르지만 API Gateway와 Service Mesh나 서로 동일한 목적, 로드밸런싱, 프록시, 인증을 수행한다. 그에 따라서 점점 API 게이트웨이와 Service Mesh가 통합되는 움직임이 보인다. 적절히 둘의 장점을 이용하는 것이 바람직하다고 생각한다.

# Service Mesh 의 구성도

[##_Image|kage@cq4Rr7/btq2CDIQrIv/1IxsliXiQqTwhoWeKx8sM0/img.png|alignCenter|data-origin-width="0" data-origin-height="0" data-ke-mobilestyle="widthContent"|||_##]

이는 Spring Cloud의 Eureka와 Gateway를 사용하여 구성한 서비스 메쉬 큰 그림이다.

# 이를 지원하는 도구 및 기술

현재 많은 Service Mesh를 지원하는 기술들이 존재한다.

이는 [CNCF](https://landscape.cncf.io) 에 CNCF Cloud Native Interactive Landscape 에서 더 자세히 확인할 수 있다.

- Netflix Eureka
- Netflix Ribbon
- Istio
- Hydra
