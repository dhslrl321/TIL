# 의존성만 추가하면 어떤 일이 생길까?

## 요청이 컨트롤러로 도달하기까지

- 로그인을 하고 제한된 리소스에 들어오면 요청이 내부까지 도달하기까지 어떤 일들이 벌어질까?
- 참여 객체들
  - DelegatingFilterProxy
  - FilterChainProxy
    - VirtualFilterChain
  - SecurityContextPersistenceFilter
  - HeaderWriterFilter
  - CsrfFilter
  - LogoutFilter
  - AbstractAuthenticationProcessingFilter
  - DefaultLoginPageGeneratingFilter
  - DefaultLogoutPageGeneratingFilter
  - BasicAuthenticationFilter
  - SecurityContextHolderAwareRequestFilter
  - SessionManagementFilter
  - FilterSecurityInterceptor

# Filter 들이 왜 이렇게 많은가

- Spring Security 가 Servlet Filter 들을 기반으로 동작한다.
- 클라이언트가 요청을 보내면 컨테이너는 FilterChain 을 생성하는데, Filter 들을 포함시키고 있다.

# DelegationFilterProxy

- 서블릿 컨테이너의 라이프사이클과 스프링의 ApplicationContext 사이를 연결함
- Spring Security 에서 사용하고자 하는 FilterChain 들을 Servlet Container 기반의 필터 위에서 동작시키기 위해서 사용함
- ApplicationFilterChain

# FilterChainProxy

- Spring Security’s Servlet support is based on Servlet Filters, so it is helpful to look at the role of Filters generally first. The picture below shows the typical layering of the handlers for a single HTTP request.
