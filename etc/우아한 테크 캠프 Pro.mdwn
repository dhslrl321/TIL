# 우아한테크캠프 Pro를 신청하시는 이유를 자세히 적어주세요.

2019년도 처음 스프링 부트를 접한 시점부터 현재 한 스타트업의 막내 개발자로 시간을 보낸 지금까지 저는 늘 '올바른 성장' 에 대해서 고민하고 탐구하고 있습니다.

제게 있어 '올바른 성장' 은 주변 상황에 따라 계속해서 바뀌고 있습니다.
요즘 제가 정의한 '올바른 성장'은 '무엇이 좋은 코드인지 제 스스로 정의내리는 것' 입니다.

'좋은 코드'를 위해서 다양한 책들을 접하고 이들을 주제로 팀 개발자들과 토론하며 성장에 대한 관심사를 지속적으로 표출하였습니다.

이런 와중 감사하게도 이를 알아봐주신 팀의 리더분께서 저에게 '우아한 테크 캠프 pro' 를 추천해주었고 '좋은 코드'를 탐구하는 저에게 필요한 교육 과정이라고 판단이 들어 신청하게 되었습니다.

# 개발 역량을 향상하기 위해 개인적으로 노력한 경험과 학습 과정에 대해 구체적으로 적어주세요

> 장난감 프로젝트, 교육수강, 스터디 모임, 컨퍼런스 강의 또는 참여 등 개발역량을 높이기 위한 경험이 있다면 어떤 활동이든지 가능합니다.

지금까지 개발자 장원익의 시간을 구간으로 나누자면 총 3가지의 큰 테마가 존재합니다. 1. 대학, 2. 취준 기간. 3. 신입인 현재
각 구간에서 성장을 어떻게 정의했고 어떤 활동들을 했는지 이야기하자면 다음과 같습니다.

1. 대학

이 시기는 유명한 기술이라면 무엇이든 학습하려는 시기였습니다.
이때 처음으로 OSS의 '공유' 라는 개발자의 문화에 빠져들게 되었고 내가 가장 빨리 공유 문화에 뛰어들 수 있는 방법인 '블로그'를 처음으로 시작했던 때 입니다.
블로그 활동을 하면서 저는 주로 어떤 기술에 대한 사용법 보다는 기술로 독자와 함께 만들어볼 수 있는 무언가를 고민했고 그 결과 'xxx로 xx 만들어보기 시리즈' 가 좋은 호응을 받으며 3년간 꾸준히 활동을 해와, 일 평균 1000 명의 방문자를 보유하고 있습니다.

2. 취준 기간

이 시기는 취업에 도움이 된다는 것이라면 무엇이든 시도했던 시기였습니다.
차세대 보안리더 양성 프로그램인 BoB 에서 보안개발 교육을 들었고 KISA 의 핀테크 프로젝트 과정을 수료했으며 Google Developer Group 활동을 통해 여러 개발자들과 스터디, 모각코, 미니 프로젝트를 통해 네트워킹을 했던 시기입니다.
이 시기에 여러 사람들을 다양한 경로로 만나 웹 서비스를 개발하고 운영하며 대학 시절 공부했던 것들을 써볼 수 있는 기회가 되었던 시기입니다.
이때 저는 코드의 퀄리티를 위해서 github 를 많이 참고했습니다.
github를 통해서 다른 사람들의 코드를 보며 그들을 이해하려는 시도를 통해서 여러 기술들을 습득했었습니다.
백엔드 개발자를 지향하던 제가 리액트를 알아보기 위해서 Naver Connect 재단의 Boostcamp 프로젝트 코드를 분석하며 리액트를 습득했었습니다.

3. 신입 (현재)

제가 현재 마주하고 있는 이 시기를 한 단어로 정리하자면 다음과 같습니다. "깨달음"
지금까지 활동들을 돌아보자면 저에게 '학습의 학만 존재하고 습은 없었다' 라는 것을 깨달을 수 있었습니다.
이 말은 즉, 2019년도부터 블로그를 3년간 운영하며 약 600여개의 글을 올렸지만 정작 이들은 저의 것이 아니었습니다.
제 학습에는 왜? 라는 질문이 빠져있었고 개발자를 위한 공부보다는 어떠한 부수적인 목적을 이루기 위한 학습이었다는 것을 알게 되었습니다.
그리고 현재 저는 '책과 이야기를 통해 성장'하는 방법을 선택하였습니다. 소프트웨어 본질을 관통하는 여러 책들을 읽으며 동료들과 한 주제로 토론하며 저의 생각들을 쌓아가고 있습니다.
하지만 이것 또한 학습의 학만 존재하고 습은 존재하지 않을 수 있습니다. 이전에 실패했던 경험들을 토대로 조급해하지 않고 한 번에 한 가지만 제대로 할 수 있도록 올바른 방향을 계속해서 탐구하고 있습니다.

# 회사 또는 팀의 문제를 해결하기 위해 변화를 시도했던 경험이 있다면 어떤 과정으로 어떤 경험을 했는지 구체적으로 적어주세요

> 프로젝트를 진행하다보면 불합리한 점, 문제가 되는 부분을 해결하기 위해 기술/개발문화/개발방법론 측면에서 시도한 경험이 있다면 사소한 활동이라도 괜찮습니다.

현재 저는 회사에게 저의 신뢰를 쌓고 있는 단계라고 생각합니다.

내가 어떤 능력을 가졌고 어떤 마음가짐으로 개발을 하고있는지와 별개로 아직 회사에 아직 보여준 무언가가 없기 때문에 신뢰를 쌓지 못했다고 생각이 듭니다.
게다가 현재 저는 팀 내의 다른 동료 개발자분들과 비교하여 경험과 실력이 객관적으로 부족하기에 팀에서 기술적인 변화를 이끌어낸 경험은 없습니다.
하지만 저는 늘 그렇듯 제가 할 수 있는 것부터 차례대로 시작하고 봅니다.
제가 속한 이 조직에서 할 수 있는 것은 팀의 분위기를 늘 성장하려는 조직으로 만들 수 있도록 노력하는 것입니다.
이를 위해서 저는 제 스스로의 회고를 모두가 볼 수 있도록 공유합니다. 회고는 KPT 에 맞춰 최대한 객관적으로 스스로를 바라보려는 노력으로 인해 부끄러운 점들도 공개가 되지만 이를 통해서 조직원들에게 한 번씩 생각을 할 수 있는 시간을 제공합니다.

# 프로젝트의 품질을 높이기 위해 활동한 경험이 있다면 어떤 과정으로 어떤 경험을 했는지 구체적으로 적어주세요.

> 프로젝트의 품질을 높이기 위해 TDD, 리팩토링, 클린코드, 코드 리뷰, 소스 코드 정적 분석, 지속적 통합, 지속적 배포와 같은 부분에서 시도한 경험이 있다면 사소한 활동이라도 괜찮습니다.

저는 모든 프로젝트를 참여할 때 다음과 같은 자기 최면을 계속해서 걸고 있습니다.

'나는 소프트웨어의 장인이다. 장인정신을 갖자.'

아래의 2가지는 제가 장인정신을 갖는 도구에 대해서 설명합니다.

1. 테스트 코드

테스트 코드는 '제가 짠 코드는 이렇게 동작합니다.' 라는 설명서와 같다고 생각하고 테스트 코드 자체가 주는 이점을 이용합니다.
테스트 코드를 짜고 있으면 이 객체가 누구와 협력을 하고 있고 누구에게 의존하고 있는지가 보이고, 한번에 한가지를 제대로 하고 있는지 없는지를 알 수 있습니다.
그래서 테스트 코드를 짜는 것이 힘들다는 것은 협력이 제대로 되지 않고 있거나 한 번에 여러가지 일을 하고 있다는 뜻이므로 테스트 코드로 장인정신을 상기시킵니다.
하지만 제 개발 패턴을 보자면 테스트 코드가 개발의 흐름을 주도하지 않습니다.
즉, TDD 의 역량은 아직 부족하다고 생각합니다. TDD 로 개발을 시작하다 시간이 지난 시점에 보면 테스트 코드는 뒷전이고 product 코드를 수정하고 있는 자신을 발견할 때가 있습니다.
이는 현재 스스로 인지하고 있으며 해결하기 위해 의도적인 수련을 하고 있습니다. 하지만 앞서 이야기하였듯 장인정신을 수행하는 첫번째 도구로 저는 테스트 코드, TDD 를 채택하였습니다.

2. 의도적인 지연

저는 정해진 기간 내에서 소스코드를 손으로 치는 것을 의도적으로 미룹니다.
그렇게 확보한 시간동안 저는 계속해서 '좋은 아키텍쳐', '적절한 의존' 에 대해서 고민하고 이를 달성하기 위해서 UML 을 적극적으로 활용하고 있습니다.
충분한 고민 없이 코딩으로 들어가는 것은 '성급하게 결정되는 지름길' 이라고 생각합니다.
무언가가 성급하게 결정되면 소프트웨어가 딱딱해지기 마련이고 이를 지양하는 마음가짐으로 프로젝트의 품질을 사수합니다.
